add_edge@add_edge(G, V1, V2) -> add_edge_err_rsn() }@ G = digraph() V1 = V2 =  vertex()    
add_edge@add_edge(G, V1, V2, Label) -> add_edge_err_rsn() }@ G = digraph() V1 = V2 =  Label =  label()    
add_edge@add_edge(G, E, V1, V2, Label) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#type-edge" class="seealso">edge()  | {error, add_edge_err_rsn() }@ G = digraph() E =  V1 = V2 =  Label =  label()    
add_vertex@add_vertex(G) -> vertex() @ G = digraph()   
add_vertex@add_vertex(G, V) -> vertex() @ G = digraph() V =  vertex()    
add_vertex@add_vertex(G, V, Label) -> vertex() @ G = digraph() V =  Label =  label()    
del_edge@del_edge(G, E) -> true@ G = digraph() E =  edge()    
del_edges@del_edges(G, Edges) -> true@ G = digraph() Edges = [ edge() ]   
del_path@del_path(G, V1, V2) -> true@ G = digraph() V1 = V2 =  vertex()    
del_vertex@del_vertex(G, V) -> true@ G = digraph() V =  vertex()    
del_vertices@del_vertices(G, Vertices) -> true@ G = digraph() Vertices = [ vertex() ]   
delete@delete(G) -> true@ G = digraph()   
edge@edge(G, E) -> {E, V1, V2, Label} | false@ G = digraph() E =  V1 = V2 =  Label =  label()    
edges@edges(G) -> Edges@ G = digraph() Edges = [ edge() ]   
edges@edges(G, V) -> Edges@ G = digraph() V =  Edges = [ edge() ]   
get_cycle@get_cycle(G, V) -> Vertices | false@ G = digraph() V =  Vertices = [ vertex() , ...]   
get_path@get_path(G, V1, V2) -> Vertices | false@ G = digraph() V1 = V2 =  Vertices = [ vertex() , ...]   
get_short_cycle@get_short_cycle(G, V) -> Vertices | false@ G = digraph() V =  Vertices = [ vertex() , ...]   
get_short_path@get_short_path(G, V1, V2) -> Vertices | false@ G = digraph() V1 = V2 =  Vertices = [ vertex() , ...]   
in_degree@in_degree(G, V) -> integer() >= 0@ G = digraph() V =  vertex()    
in_edges@in_edges(G, V) -> Edges@ G = digraph() V =  Edges = [ edge() ]   
in_neighbours@in_neighbours(G, V) -> Vertex@ G = digraph() V =  Vertex = [ vertex() ]   
info@info(G) -> InfoList@ G = digraph() InfoList = <br />&nbsp;&nbsp;&nbsp;&nbsp;[{cyclicity, Cyclicity ::  d_cyclicity() } |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{memory, NoWords :: integer() >= 0} |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{protection, Protection ::  d_protection() }]   
new@new() -> digraph()@ 
new@new(Type) -> digraph()@ Type = [ d_type() ]   
no_edges@no_edges(G) -> integer() >= 0@ G = digraph()   
no_vertices@no_vertices(G) -> integer() >= 0@ G = digraph()   
out_degree@out_degree(G, V) -> integer() >= 0@ G = digraph() V =  vertex()    
out_edges@out_edges(G, V) -> Edges@ G = digraph() V =  Edges = [ edge() ]   
out_neighbours@out_neighbours(G, V) -> Vertices@ G = digraph() V =  Vertices = [ vertex() ]   
vertex@vertex(G, V) -> {V, Label} | false@ G = digraph() V =  Label =  label()    
vertices@vertices(G) -> Vertices@ G = digraph() Vertices = [ vertex() ]   
