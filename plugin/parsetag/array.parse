default@default(Array :: array()) -> term()
fix@fix(Array :: array()) -> array()
foldl@foldl(Function, InitialAcc :: A, Array :: array()) -> B@ Function = <br />&nbsp;&nbsp;&nbsp;&nbsp;fun((Index ::  array_indx() , Value :: term(), Acc :: A) -> B)   
foldr@foldr(Function, InitialAcc :: A, Array :: array()) -> B@ Function = <br />&nbsp;&nbsp;&nbsp;&nbsp;fun((Index ::  array_indx() , Value :: term(), Acc :: A) -> B)   
from_list@from_list(List :: list()) -> array()
from_list@from_list(List :: list(), Default :: term()) -> array()
from_orddict@from_orddict(Orddict :: indx_pairs() ) -> array()
from_orddict@from_orddict(Orddict :: indx_pairs() , Default :: term()) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array()
get@get(I :: array_indx() , Array :: array()) -> term()
is_array@is_array(X :: term()) -> boolean()
is_fix@is_fix(Array :: array()) -> boolean()
map@map(Function, Array :: array()) -> array()@ Function = <br />&nbsp;&nbsp;&nbsp;&nbsp;fun((Index ::  array_indx() , Value :: term()) -> term())   
new@new() -> array()
new@new(Options :: array_opts() ) -> array()
new@new(Size :: integer() >= 0, Options :: array_opts() ) -> array()
relax@relax(Array :: array()) -> array()
reset@reset(I :: array_indx() , Array :: array()) -> array()
resize@resize(Array :: array()) -> array()
resize@resize(Size :: integer() >= 0, Array :: array()) -> array()
set@set(I :: array_indx() , Value :: term(), Array :: array()) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array()
size@size(Array :: array()) -> integer() >= 0
sparse_foldl@sparse_foldl(Function, InitialAcc :: A, Array :: array()) -> B@ Function = <br />&nbsp;&nbsp;&nbsp;&nbsp;fun((Index ::  array_indx() , Value :: term(), Acc :: A) -> B)   
sparse_foldr@sparse_foldr(Function, InitialAcc :: A, Array :: array()) -> B@ Function = <br />&nbsp;&nbsp;&nbsp;&nbsp;fun((Index ::  array_indx() , Value :: term(), Acc :: A) -> B)   
sparse_map@sparse_map(Function, Array :: array()) -> array()@ Function = <br />&nbsp;&nbsp;&nbsp;&nbsp;fun((Index ::  array_indx() , Value :: term()) -> term())   
sparse_size@sparse_size(Array :: array()) -> integer() >= 0
sparse_to_list@sparse_to_list(Array :: array()) -> list()
sparse_to_orddict@sparse_to_orddict(Array :: array()) -> indx_pairs() 
to_list@to_list(Array :: array()) -> list()
to_orddict@to_orddict(Array :: array()) -> indx_pairs() 
