start_link@start_link(Module, Args) -> startlink_ret() @ Module = module() Args = term()   
start_link@start_link(SupName, Module, Args) -> startlink_ret() @ SupName =  Module = module() Args = term()   
start_child@start_child(SupRef, ChildSpec) -> startchild_ret() @ SupRef =  ChildSpec =  child_spec()  | (List :: [term()])   
terminate_child@terminate_child(SupRef, Id) -> Result@ SupRef =  Id = pid() |  Result = ok | {error, Error} Error = not_found | simple_one_for_one   
delete_child@delete_child(SupRef, Id) -> Result@ SupRef =  Id =  Result = ok | {error, Error} Error = running | not_found | simple_one_for_one   
restart_child@restart_child(SupRef, Id) -> Result@ SupRef =  Id =  Result = {ok, Child ::  Error = running | not_found | simple_one_for_one | term()   
which_children@which_children(SupRef) -> [{Id, Child, Type, Modules}]@ SupRef =  Id =  Child =  Type =  Modules =  modules()    
count_children@count_children(SupRef) -> PropListOfCounts@ SupRef =  PropListOfCounts = [Count] Count = {specs, ChildSpecCount :: integer() >= 0}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {active, ActiveProcessCount :: integer() >= 0}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {supervisors,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ChildSupervisorCount :: integer() >= 0}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {workers, ChildWorkerCount :: integer() >= 0}   
check_childspecs@check_childspecs(ChildSpecs) -> Result@ ChildSpecs = [ Result = ok | {error, Error :: term()}   
init@Module:init(Args) -> Result@ 
