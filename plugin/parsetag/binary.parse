at@at(Subject, Pos) -> byte()@ 
bin_to_list@bin_to_list(Subject) -> [byte()]@ 
bin_to_list@bin_to_list(Subject, PosLen) -> [byte()]@ 
bin_to_list@bin_to_list(Subject, Pos, Len) -> [byte()]@ 
compile_pattern@compile_pattern(Pattern) -> cp()@ 
copy@copy(Subject) -> binary()@ 
copy@copy(Subject,N) -> binary()@ 
decode_unsigned@decode_unsigned(Subject) -> Unsigned@ 
decode_unsigned@decode_unsigned(Subject, Endianess) -> Unsigned@ 
encode_unsigned@encode_unsigned(Unsigned) -> binary()@ 
encode_unsigned@encode_unsigned(Unsigned,Endianess) -> binary()@ 
first@first(Subject) -> byte()@ 
last@last(Subject) -> byte()@ 
list_to_bin@list_to_bin(ByteList) -> binary()@ 
longest_common_prefix@longest_common_prefix(Binaries) -> integer() >= 0@ 
longest_common_suffix@longest_common_suffix(Binaries) -> integer() >= 0@ 
match@match(Subject, Pattern) -> Found | <code>nomatch</code>@ 
match@match(Subject,Pattern,Options) -> Found | <code>nomatch</code>@ 
matches@matches(Subject, Pattern) -> Found@ 
matches@matches(Subject,Pattern,Options) -> Found@ 
part@part(Subject, PosLen) -> binary()@ 
part@part(Subject, Pos, Len) -> binary()@ 
referenced_byte_size@referenced_byte_size(binary()) -> integer() >= 0@ 
replace@replace(Subject, Pattern, Replacement) -> Result@ Subject = binary() Pattern = binary() | [binary()] |  Replacement = Result = binary()   
replace@replace(Subject, Pattern, Replacement, Options) -> Result@ Subject = binary() Pattern = binary() | [binary()] |  Replacement = binary() Options = [Option] Option = global | {scope,  InsPos = OnePos | [OnePos] OnePos = integer() >= 0 Result = binary()   
split@split(Subject, Pattern) -> Parts@ Subject = binary() Pattern = binary() | [binary()] |  Parts = [binary()]   
split@split(Subject, Pattern, Options) -> Parts@ Subject = binary() Pattern = binary() | [binary()] |  Options = [Option] Option = {scope,  Parts = [binary()]   
