get_all_env@get_all_env() -> Env@ Env = [{Par :: atom(), Val :: term()}]   
get_all_env@get_all_env(Application) -> Env@ Application = atom() Env = [{Par :: atom(), Val :: term()}]   
get_all_key@get_all_key() -> [] | {ok, Keys}@ Keys = [{Key :: atom(), Val :: term()}, ...]   
get_all_key@get_all_key(Application) -> undefined | Keys@ Application = atom() Keys = {ok, [{Key :: atom(), Val :: term()}, ...]}   
get_application@get_application() -> undefined | {ok, Application}@ Application = atom()   
get_application@get_application(PidOrModule) -> undefined | {ok, Application}@ PidOrModule = (Pid :: pid()) | (Module :: module()) Application = atom()   
get_env@get_env(Par) -> undefined | {ok, Val}@ Par = atom() Val = term()   
get_env@get_env(Application, Par) -> undefined | {ok, Val}@ Application = Par = atom() Val = term()   
get_key@get_key(Key) -> undefined | {ok, Val}@ Key = atom() Val = term()   
get_key@get_key(Application, Key) -> undefined | {ok, Val}@ Application = Key = atom() Val = term()   
load@load(AppDescr) -> ok | {error, Reason}@ AppDescr = Application | (AppSpec ::  Application = atom() Reason = term()   
load@load(AppDescr, Distributed) -> ok | {error, Reason}@ AppDescr = Application | (AppSpec ::  Application = atom() Distributed = {Application, Nodes} Nodes = [node() |  Time = integer() >= 1 Reason = term()   
loaded_applications@loaded_applications() -> [{Application, Description, Vsn}]@ Application = atom() Description = Vsn = string()   
permit@permit(Application, Permission) -> ok | {error, Reason}@ Application = atom() Permission = boolean() Reason = term()   
set_env@set_env(Application, Par, Val) -> ok@ Application = Par = atom() Val = term()   
set_env@set_env(Application, Par, Val, Timeout) -> ok@ Application = Par = atom() Val = term() Timeout = timeout()   
start@start(Application) -> ok | {error, Reason}@ Application = atom() Reason = term()   
start@start(Application, Type) -> ok | {error, Reason}@ Application = atom() Type =  Reason = term()   
start_type@start_type() -> StartType | undefined | local@ StartType =  start_type()    
stop@stop(Application) -> ok | {error, Reason}@ Application = atom() Reason = term()   
takeover@takeover(Application, Type) -> ok | {error, Reason}@ Application = atom() Type =  Reason = term()   
unload@unload(Application) -> ok | {error, Reason}@ Application = atom() Reason = term()   
unset_env@unset_env(Application, Par) -> ok@ Application = Par = atom()   
unset_env@unset_env(Application, Par, Timeout) -> ok@ Application = Par = atom() Timeout = timeout()   
which_applications@which_applications() -> [{Application, Description, Vsn}]@ Application = atom() Description = Vsn = string()   
which_applications@which_applications(Timeout) -> [{Application, Description, Vsn}]@ Timeout = timeout() Application = atom() Description = Vsn = string()   
start@Module:start(StartType, StartArgs) -> {ok, Pid} | {ok, Pid, State} | {error, Reason}@ 
start_phase@Module:start_phase(Phase, StartType, PhaseArgs) -> ok | {error, Reason}@ 
prep_stop@Module:prep_stop(State) -> NewState@ 
stop@Module:stop(State)@ 
config_change@Module:config_change(Changed, New, Removed) -> ok@ 
