accessible_logs@accessible_logs() -> {[LocalLog], [DistributedLog]}@ LocalLog = DistributedLog =  log()    
alog@alog(Log, Term) -> notify_ret() @ Log =  Term = term()   
balog@balog(Log, Bytes) -> notify_ret() @ Log =  Bytes =  bytes()    
alog_terms@alog_terms(Log, TermList) -> notify_ret() @ Log =  TermList = [term()]   
balog_terms@balog_terms(Log, ByteList) -> notify_ret() @ Log =  ByteList = [ bytes() ]   
block@block(Log) -> ok | {error, block_error_rsn() }@ Log =  log()    
block@block(Log, QueueLogRecords) -> ok | {error, block_error_rsn() }@ Log =  QueueLogRecords = boolean()   
change_header@change_header(Log, Header) -> ok | {error, Reason}@ Log =  Header = {head,  Reason = no_such_log<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| nonode<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {read_only_mode, Log}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {blocked_log, Log}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {badarg, head}   
change_notify@change_notify(Log, Owner, Notify) -> ok | {error, Reason}@ Log =  Owner = pid() Notify = boolean() Reason = no_such_log<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| nonode<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {blocked_log, Log}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {badarg, notify}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {not_owner, Owner}   
change_size@change_size(Log, Size) -> ok | {error, Reason}@ Log =  Size =  Reason = no_such_log<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| nonode<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {read_only_mode, Log}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {blocked_log, Log}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {new_size_too_small, CurrentSize :: integer() >= 1}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {badarg, size}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {file_error,  file:filename() ,  file_error() }   
chunk@chunk(Log, Continuation) -> chunk_ret() @ Log =  Continuation = start |  continuation()    
chunk@chunk(Log, Continuation, N) -> chunk_ret() @ Log =  Continuation = start |  N = integer() >= 1 | infinity   
bchunk@bchunk(Log, Continuation) -> bchunk_ret() @ Log =  Continuation = start |  continuation()    
bchunk@bchunk(Log, Continuation, N) -> bchunk_ret() @ Log =  Continuation = start |  N = integer() >= 1 | infinity   
chunk_info@chunk_info(Continuation) -> InfoList | {error, Reason}@ Continuation =  InfoList = [{node, Node :: node()}, ...] Reason = {no_continuation, Continuation}   
chunk_step@chunk_step(Log, Continuation, Step) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ok, any()} | {error, Reason}@ Log =  Continuation = start |  Step = integer() Reason = no_such_log<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| end_of_log<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {format_external, Log}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {blocked_log, Log}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {badarg, continuation}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {file_error,  file:filename() ,  file_error() }   
close@close(Log) -> ok | {error, close_error_rsn() }@ Log =  log()    
format_error@format_error(Error) -> io_lib:chars() @ Error = term()   
inc_wrap_file@inc_wrap_file(Log) -> ok | {error, inc_wrap_error_rsn() }@ Log =  log()    
info@info(Log) -> InfoList | {error, no_such_log}@ Log =  InfoList = [ dlog_info() ]   
lclose@lclose(Log) -> ok | {error, lclose_error_rsn() }@ Log =  log()    
lclose@lclose(Log, Node) -> ok | {error, lclose_error_rsn() }@ Log =  Node = node()   
log@log(Log, Term) -> ok | {error, Reason :: log_error_rsn() }@ Log =  Term = term()   
blog@blog(Log, Bytes) -> ok | {error, Reason :: log_error_rsn() }@ Log =  Bytes =  bytes()    
log_terms@log_terms(Log, TermList) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok | {error, Resaon :: log_error_rsn() }@ Log =  TermList = [term()]   
blog_terms@blog_terms(Log, BytesList) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok | {error, Reason :: log_error_rsn() }@ Log =  BytesList = [ bytes() ]   
open@open(ArgL) -> dist_open_ret() @ ArgL =  dlog_options()    
pid2name@pid2name(Pid) -> {ok, Log} | undefined@ Pid = pid() Log =  log()    
reopen@reopen(Log, File) -> ok | {error, reopen_error_rsn() }@ Log =  File =  file:filename()    
reopen@reopen(Log, File, Head) -> ok | {error, reopen_error_rsn() }@ Log =  File =  Head = term()   
breopen@breopen(Log, File, BHead) -> ok | {error, reopen_error_rsn() }@ Log =  File =  BHead =  bytes()    
sync@sync(Log) -> ok | {error, sync_error_rsn() }@ Log =  log()    
truncate@truncate(Log) -> ok | {error, trunc_error_rsn() }@ Log =  log()    
truncate@truncate(Log, Head) -> ok | {error, trunc_error_rsn() }@ Log =  Head = term()   
btruncate@btruncate(Log, BHead) -> ok | {error, trunc_error_rsn() }@ Log =  BHead =  bytes()    
unblock@unblock(Log) -> ok | {error, unblock_error_rsn() }@ Log =  log()    
