del_lock@del_lock(Id) -> true@ Id =  id()    
del_lock@del_lock(Id, Nodes) -> true@ Id =  Nodes = [node()]   
notify_all_name@notify_all_name(Name, Pid1, Pid2) -> none@ Name = term() Pid1 = Pid2 = pid()   
random_exit_name@random_exit_name(Name, Pid1, Pid2) -> none@ Name = term() Pid1 = Pid2 = pid()   
random_notify_name@random_notify_name(Name, Pid1, Pid2) -> none@ Name = term() Pid1 = Pid2 = pid()   
register_name@register_name(Name, Pid) -> yes | no@ Name = term() Pid = pid()   
register_name@register_name(Name, Pid, Resolve) -> yes | no@ Name = term() Pid = pid() Resolve =  method()    
registered_names@registered_names() -> [Name]@ Name = term()   
re_register_name@re_register_name(Name, Pid) -> term()@ Name = term() Pid = pid()   
re_register_name@re_register_name(Name, Pid, Resolve) -> term()@ Name = term() Pid = pid() Resolve =  method()    
send@send(Name, Msg) -> Pid@ Name = Msg = term() Pid = pid()   
set_lock@set_lock(Id) -> boolean()@ Id =  id()    
set_lock@set_lock(Id, Nodes) -> boolean()@ Id =  Nodes = [node()]   
set_lock@set_lock(Id, Nodes, Retries) -> boolean()@ Id =  Nodes = [node()] Retries =  retries()    
sync@sync() -> ok | {error, Reason :: term()}@ 
trans@trans(Id, Fun) -> Res | aborted@ Id =  Fun =  Res = term()   
trans@trans(Id, Fun, Nodes) -> Res | aborted@ Id =  Fun =  Nodes = [node()] Res = term()   
trans@trans(Id, Fun, Nodes, Retries) -> Res | aborted@ Id =  Fun =  Nodes = [node()] Retries =  Res = term()   
unregister_name@unregister_name(Name) -> term()@ Name = term()   
whereis_name@whereis_name(Name) -> pid() | undefined@ Name = term()   
