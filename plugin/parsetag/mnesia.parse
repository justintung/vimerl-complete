abort@abort(Reason) -> transaction abort @ 
activate_checkpoint@activate_checkpoint(Args) -> {ok,Name,Nodes} | {error,Reason}@ 
activity@activity(AccessContext, Fun [, Args]) -> ResultOfFun | exit(Reason)@ 
activity@activity(AccessContext, Fun, Args, AccessMod) -> ResultOfFun | exit(Reason)@ 
add_table_copy@add_table_copy(Tab, Node, Type) -> {aborted, R} | {atomic, ok}@ 
add_table_index@add_table_index(Tab, AttrName) -> {aborted, R} | {atomic, ok}@ 
all_keys@all_keys(Tab) -> KeyList | transaction abort@ 
async_dirty@async_dirty(Fun, [, Args])  -> ResultOfFun | exit(Reason)@ 
backup@backup(Opaque [, BackupMod]) -> ok | {error,Reason}@ 
backup_checkpoint@backup_checkpoint(Name, Opaque [, BackupMod]) ->  ok | {error,Reason}@ 
change_config@change_config(Config, Value) -> {error, Reason} | {ok, ReturnValue}@ 
change_table_access_mode@change_table_access_mode(Tab, AccessMode) -> {aborted, R} | {atomic, ok}@ 
change_table_copy_type@change_table_copy_type(Tab, Node, To) -> {aborted, R} | {atomic, ok}@ 
change_table_load_order@change_table_load_order(Tab, LoadOrder) -> {aborted, R} | {atomic, ok}@ 
change_table_majority@change_table_majority(Tab, Majority) -> {aborted, R} | {atomic, ok}@ 
clear_table@clear_table(Tab) -> {aborted, R} | {atomic, ok}@ 
create_schema@create_schema(DiscNodes) -> ok | {error,Reason}@ 
create_table@create_table(Name, TabDef) -> {atomic, ok} | {aborted, Reason}@ 
deactivate_checkpoint@deactivate_checkpoint(Name) -> ok | {error, Reason}@ 
del_table_copy@del_table_copy(Tab, Node) -> {aborted, R} | {atomic, ok}@ 
del_table_index@del_table_index(Tab, AttrName) -> {aborted, R} | {atomic, ok}@ 
delete@delete({Tab, Key}) -> transaction abort | ok @ 
delete@delete(Tab, Key, LockKind) -> transaction abort | ok @ 
delete_object@delete_object(Record) -> transaction abort | ok @ 
delete_object@delete_object(Tab, Record, LockKind) -> transaction abort | ok @ 
delete_schema@delete_schema(DiscNodes) -> ok | {error,Reason}@ 
delete_table@delete_table(Tab) -> {aborted, Reason} | {atomic, ok} @ 
dirty_all_keys@dirty_all_keys(Tab) -> KeyList | exit({aborted, Reason}).@ 
dirty_delete@dirty_delete({Tab, Key}) -> ok | exit({aborted, Reason}) @ 
dirty_delete_object@dirty_delete_object(Record) @ 
dirty_delete_object@dirty_delete_object(Tab, Record) @ 
dirty_first@dirty_first(Tab) ->  Key | exit({aborted, Reason}) @ 
dirty_index_match_object@dirty_index_match_object(Pattern, Pos)@ 
dirty_index_match_object@dirty_index_match_object(Tab, Pattern, Pos)@ 
dirty_index_read@dirty_index_read(Tab, SecondaryKey, Pos)@ 
dirty_last@dirty_last(Tab) ->  Key | exit({aborted, Reason}) @ 
dirty_match_object@dirty_match_object(Pattern) -> RecordList | exit({aborted, Reason}).@ 
dirty_match_object@dirty_match_object(Tab, Pattern) -> RecordList | exit({aborted, Reason}).@ 
dirty_next@dirty_next(Tab, Key) -> Key | exit({aborted, Reason}) @ 
dirty_prev@dirty_prev(Tab, Key) -> Key | exit({aborted, Reason}) @ 
dirty_read@dirty_read({Tab, Key}) -> ValueList | exit({aborted, Reason}@ 
dirty_select@dirty_select(Tab, MatchSpec) -> ValueList | exit({aborted, Reason}@ 
dirty_slot@dirty_slot(Tab, Slot) -> RecordList | exit({aborted, Reason})@ 
dirty_update_counter@dirty_update_counter({Tab, Key}, Incr) -> NewVal | exit({aborted, Reason})@ 
dirty_write@dirty_write(Record) -> ok | exit({aborted, Reason})@ 
dirty_write@dirty_write(Tab, Record) -> ok | exit({aborted, Reason})@ 
dump_log@dump_log() -> dumped@ 
dump_tables@dump_tables(TabList) -> {atomic, ok} | {aborted, Reason}@ 
dump_to_textfile@dump_to_textfile(Filename) @ 
error_description@error_description(Error) -> String @ 
ets@ets(Fun, [, Args]) -> ResultOfFun | exit(Reason)@ 
first@first(Tab) ->  Key | transaction abort @ 
foldl@foldl(Function, Acc, Table) -> NewAcc | transaction abort @ 
foldr@foldr(Function, Acc, Table) -> NewAcc | transaction abort @ 
force_load_table@force_load_table(Tab) -> yes | ErrorDescription @ 
index_match_object@index_match_object(Pattern, Pos) -> transaction abort | ObjList@ 
index_match_object@index_match_object(Tab, Pattern, Pos, LockKind) -> transaction abort | ObjList@ 
index_read@index_read(Tab, SecondaryKey, Pos) -> transaction abort | RecordList @ 
info@info() -> ok @ 
install_fallback@install_fallback(Opaque) -> ok | {error,Reason}@ 
install_fallback@install_fallback(Opaque, Args) -> ok | {error,Reason}@ 
is_transaction@is_transaction() ->  boolean @ 
last@last(Tab) ->  Key | transaction abort @ 
load_textfile@load_textfile(Filename)@ 
lock@lock(LockItem, LockKind) -> Nodes | ok | transaction abort@ 
match_object@match_object(Pattern) ->transaction abort | RecList @ 
match_object@match_object(Tab, Pattern, LockKind) ->transaction abort | RecList @ 
move_table_copy@move_table_copy(Tab, From, To) -> {aborted, Reason} | {atomic, ok}@ 
next@next(Tab, Key) -> Key | transaction abort @ 
prev@prev(Tab, Key) -> Key | transaction abort @ 
read@read({Tab, Key}) -> transaction abort | RecordList @ 
read@read(Tab, Key, LockKind) -> transaction abort | RecordList @ 
read_lock_table@read_lock_table(Tab) -> ok | transaction abort@ 
report_event@report_event(Event) -> ok@ 
restore@restore(Opaque, Args) -> {atomic, RestoredTabs} |{aborted, Reason}@ 
s_delete@s_delete({Tab, Key}) -> ok | transaction abort @ 
s_delete_object@s_delete_object(Record) -> ok | transaction abort @ 
s_write@s_write(Record) -> ok | transaction abort @ 
schema@schema() -> ok @ 
schema@schema(Tab) -> ok @ 
select@select(Tab, MatchSpec [, Lock]) ->  transaction abort | [Object] @ 
select@select(Tab, MatchSpec, NObjects, Lock) ->  transaction abort | {[Object],Cont} | '$end_of_table'@ 
select@select(Cont) ->  transaction abort | {[Object],Cont} | '$end_of_table'@ 
set_debug_level@set_debug_level(Level) -> OldLevel@ 
set_master_nodes@set_master_nodes(MasterNodes) -> ok | {error, Reason} @ 
set_master_nodes@set_master_nodes(Tab, MasterNodes) -> ok | {error, Reason} @ 
snmp_close_table@snmp_close_table(Tab) -> {aborted, R} | {atomic, ok}@ 
snmp_get_mnesia_key@snmp_get_mnesia_key(Tab, RowIndex) -> {ok, Key} | undefined@ 
snmp_get_next_index@snmp_get_next_index(Tab, RowIndex) -> {ok, NextIndex} | endOfTable@ 
snmp_get_row@snmp_get_row(Tab, RowIndex) -> {ok, Row} | undefined@ 
snmp_open_table@snmp_open_table(Tab, SnmpStruct) -> {aborted, R} | {atomic, ok}@ 
start@start() -> ok | {error, Reason} @ 
stop@stop() -> stopped @ 
subscribe@subscribe(EventCategory)@ 
sync_dirty@sync_dirty(Fun, [, Args]) -> ResultOfFun | exit(Reason) @ 
sync_transaction@sync_transaction(Fun, [[, Args], Retries]) -> {aborted, Reason} | {atomic, ResultOfFun} @ 
system_info@system_info(InfoKey) -> Info | exit({aborted, Reason})@ 
table@table(Tab [,[Option]]) -> QueryHandle @ 
table_info@table_info(Tab, InfoKey) -> Info | exit({aborted, Reason})@ 
transaction@transaction(Fun [[, Args], Retries]) -> {aborted, Reason} | {atomic, ResultOfFun}@ 
transform_table@transform_table(Tab, Fun, NewAttributeList, NewRecordName) ->  {aborted, R} | {atomic, ok} @ 
transform_table@transform_table(Tab, Fun, NewAttributeList) ->  {aborted, R} | {atomic, ok} @ 
traverse_backup@traverse_backup(Source, [SourceMod,] Target, [TargetMod,] Fun, Acc) -> {ok, LastAcc} | {error, Reason}@ 
uninstall_fallback@uninstall_fallback() -> ok | {error,Reason}@ 
uninstall_fallback@uninstall_fallback(Args) -> ok | {error,Reason}@ 
unsubscribe@unsubscribe(EventCategory)@ 
wait_for_tables@wait_for_tables(TabList,Timeout) -> ok | {timeout, BadTabList} | {error, Reason} @ 
wread@wread({Tab, Key}) -> transaction abort | RecordList @ 
write@write(Record) -> transaction abort | ok @ 
write@write(Tab, Record, LockKind) -> transaction abort | ok @ 
write_lock_table@write_lock_table(Tab) -> ok | transaction abort@ 
