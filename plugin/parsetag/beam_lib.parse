chunks@chunks(Beam, ChunkRefs) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ok, {module(), [<a href="#type-chunkdata" class="seealso">chunkdata() ]}} |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{error, beam_lib, chnk_rsn() }@ Beam =  ChunkRefs = [ chunkref() ]   
chunks@chunks(Beam, ChunkRefs, Options) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ok, {module(), [ChunkResult]}} |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{error, beam_lib, chnk_rsn() }@ Beam =  ChunkRefs = [ Options = [allow_missing_chunks] ChunkResult =  chunkdata() <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {ChunkRef ::  chunkref() , missing_chunk}   
version@version(Beam) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ok, {module(), [Version :: term()]}} |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{error, beam_lib, chnk_rsn() }@ Beam =  beam()    
md5@md5(Beam) -> {ok, {module(), MD5}} | {error, beam_lib, chnk_rsn() }@ Beam =  MD5 = binary()   
info@info(Beam) -> [InfoPair] | {error, beam_lib, info_rsn() }@ Beam =  InfoPair = {file, Filename ::  file:filename() }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {binary, Binary :: binary()}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {module, Module :: module()}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {chunks,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[{ChunkId ::  chunkid() ,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pos :: integer() >= 0,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Size :: integer() >= 0}]}   
cmp@cmp(Beam1, Beam2) -> ok | {error, beam_lib, cmp_rsn() }@ Beam1 = Beam2 =  beam()    
cmp_dirs@cmp_dirs(Dir1, Dir2) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{Only1, Only2, Different} | {error, beam_lib, Reason}@ Dir1 = Dir2 = atom() |  Only1 = Only2 = [ Different =  Reason = {not_a_directory, term()} |  info_rsn()    
diff_dirs@diff_dirs(Dir1, Dir2) -> ok | {error, beam_lib, Reason}@ Dir1 = Dir2 = atom() |  Reason = {not_a_directory, term()} |  info_rsn()    
strip@strip(Beam1) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ok, {module(), Beam2}} | {error, beam_lib, info_rsn() }@ Beam1 = Beam2 =  beam()    
strip_files@strip_files(Files) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ok, [{module(), Beam}]} |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{error, beam_lib, info_rsn() }@ Files = [ Beam =  beam()    
strip_release@strip_release(Dir) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ok, [{module(), file:filename() }]} |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{error, beam_lib, Reason}@ Dir = atom() |  Reason = {not_a_directory, term()} |  info_rsn()    
format_error@format_error(Reason) -> io_lib:chars() @ Reason = term()   
crypto_key_fun@crypto_key_fun(CryptoKeyFun) -> ok | {error, Reason}@ CryptoKeyFun =  Reason = badfun | exists | term()   
clear_crypto_key_fun@clear_crypto_key_fun() -> undefined | {ok, Result}@ Result = undefined | term()   
