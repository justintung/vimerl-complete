append@append(Key, Value, Orddict1) -> Orddict2@ Key = Value = term() Orddict1 = Orddict2 =  orddict()    
append_list@append_list(Key, ValList, Orddict1) -> Orddict2@ Key = term() ValList = [Value :: term()] Orddict1 = Orddict2 =  orddict()    
erase@erase(Key, Orddict1) -> Orddict2@ Key = term() Orddict1 = Orddict2 =  orddict()    
fetch@fetch(Key, Orddict) -> Value@ Key = Value = term() Orddict =  orddict()    
fetch_keys@fetch_keys(Orddict) -> Keys@ Orddict =  Keys = [term()]   
filter@filter(Pred, Orddict1) -> Orddict2@ Pred = fun((Key :: term(), Value :: term()) -> boolean()) Orddict1 = Orddict2 =  orddict()    
find@find(Key, Orddict) -> {ok, Value} | error@ Key = term() Orddict =  Value = term()   
fold@fold(Fun, Acc0, Orddict) -> Acc1@ Fun =  Acc0 = Acc1 = term() Orddict =  orddict()    
from_list@from_list(List) -> Orddict@ List = [{Key :: term(), Value :: term()}] Orddict =  orddict()    
is_key@is_key(Key, Orddict) -> boolean()@ Key = term() Orddict =  orddict()    
map@map(Fun, Orddict1) -> Orddict2@ Fun =  Orddict1 = Orddict2 =  orddict()    
merge@merge(Fun, Orddict1, Orddict2) -> Orddict3@ Fun =  Orddict1 = Orddict2 = Orddict3 =  orddict()    
new@new() -> orddict() @ 
size@size(Orddict) -> integer() >= 0@ Orddict =  orddict()    
store@store(Key, Value, Orddict1) -> Orddict2@ Key = Value = term() Orddict1 = Orddict2 =  orddict()    
to_list@to_list(Orddict) -> List@ Orddict =  List = [{Key :: term(), Value :: term()}]   
update@update(Key, Fun, Orddict1) -> Orddict2@ Key = term() Fun = fun((Value1 :: term()) -> Value2 :: term()) Orddict1 = Orddict2 =  orddict()    
update@update(Key, Fun, Initial, Orddict1) -> Orddict2@ Key = Initial = term() Fun = fun((Value1 :: term()) -> Value2 :: term()) Orddict1 = Orddict2 =  orddict()    
update_counter@update_counter(Key, Increment, Orddict1) -> Orddict2@ Key = term() Increment = number() Orddict1 = Orddict2 =  orddict()    
