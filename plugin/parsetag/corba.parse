create@create(Module, TypeID) -> Object@ 
create@create(Module, TypeID, Env) -> Object@ 
create@create(Module, TypeID, Env, Optons1) -> Object@ 
create_link@create_link(Module, TypeID) -> Object@ 
create_link@create_link(Module, TypeID, Env) -> Object@ 
create_link@create_link(Module, TypeID, Env, Options2) -> Reply@ 
dispose@dispose(Object) -> ok@ 
create_nil_objref@create_nil_objref() -> Object@ 
create_subobject_key@create_subobject_key(Object, Key) -> Result@ 
get_subobject_key@get_subobject_key(Object) -> Result@ 
get_pid@get_pid(Object) -> Result@ 
raise@raise(Exception)@ 
reply@reply(To, Reply) -> true@ 
resolve_initial_references@resolve_initial_references(ObjectId) -> Object@ 
resolve_initial_references@resolve_initial_references(ObjectId, Contexts) -> Object@ 
add_initial_service@add_initial_service(ObjectId, Object) -> boolean()@ 
remove_initial_service@remove_initial_service(ObjectId) -> boolean()@ 
list_initial_services@list_initial_services() -> [ObjectId]@ 
resolve_initial_references_remote@resolve_initial_references_remote(ObjectId, Address) -> Object@ 
resolve_initial_references_remote@resolve_initial_references_remote(ObjectId, Address, Contexts) -> Object@ 
list_initial_services_remote@list_initial_services_remote(Address) -> [ObjectId]@ 
list_initial_services_remote@list_initial_services_remote(Address, Contexts) -> [ObjectId]@ 
object_to_string@object_to_string(Object) -> IOR_string@ 
string_to_object@string_to_object(IOR_string) -> Object@ 
string_to_object@string_to_object(IOR_string, Contexts) -> Object@ 
print_object@print_object(Data [, Type]) -> ok | {'EXCEPTION', E} |  {'EXIT', R} | string()@ 
add_alternate_iiop_address@add_alternate_iiop_address(Object, Host, Port) -> NewObject | {'EXCEPTION', E}@ 
orb_init@orb_init(KeyValueList) -> ok | {'EXIT', Reason}@ 
