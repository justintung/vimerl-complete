verify_data@verify_data(DER::binary()) -> {md5 | sha, binary(), binary()}
init_validation_state@init_validation_state(OTPCertificate::#'OTPCertificate'{}, DefaultPathLen::integer(), Options::list()) -> #path_validation_state{}
prepare_for_next_cert@prepare_for_next_cert(OTPCertificate::#'OTPCertificate'{}, Path_validation_state::#path_validation_state{}) -> #path_validation_state{}
validate_time@validate_time(OTPCertificate::#'OTPCertificate'{}, UserState::term(), VerifyFun::function()) -> term()
validate_issuer@validate_issuer(OTPCertificate::#'OTPCertificate'{}, Issuer::term(), UserState::term(), VerifyFun::function()) -> term()
validate_signature@validate_signature(OTPCertificate::#'OTPCertificate'{}, DER::binary(), Key::term(), KeyParams::term(), UserState::term(), VerifyFun::function()) -> term()
validate_names@validate_names(OTPCertificate::#'OTPCertificate'{}, Permit::no_constraints | list(), Exclude::list(), Last::term(), UserState::term(), VerifyFun::function()) -> term()
validate_revoked_status@validate_revoked_status(OTPCertificate::#'OTPCertificate'{}, UserState::term(), VerifyFun::function()) -> term()
validate_extensions@validate_extensions(OTPCertificate::#'OTPCertificate'{}, Path_validation_state::#path_validation_state{}, UserState::term(), VerifyFun::function()) -> {#path_validation_state{}, UserState::term()}
normalize_general_name@normalize_general_name(X1::{rdnSequence, term()}) -> {rdnSequence, term()}
is_self_signed@is_self_signed(OTPCertificate::#'OTPCertificate'{}) -> boolean()
is_issuer@is_issuer(X1::{rdnSequence, term()}, X2::{rdnSequence, term()}) -> boolean()
issuer_id@issuer_id(OTPCertificate::#'OTPCertificate'{}, X2::self | other) -> {ok, {integer(), term()}} | {error, issuer_not_found}
is_fixed_dh_cert@is_fixed_dh_cert(OTPCertificate::#'OTPCertificate'{}) -> boolean()
verify_fun@verify_fun(OTPCertificate::#'OTPCertificate'{}, Result::{bad_cert, atom()} | {extension, #'Extension'{}} | valid | valid_peer, UserState0::term(), VerifyFun::function()) -> term()
