abs@abs(Number) -> integer() | float()@ 
adler32@erlang:adler32(Data) -> integer()@ 
adler32@erlang:adler32(OldAdler, Data) -> integer()@ 
adler32_combine@erlang:adler32_combine(FirstAdler, SecondAdler, SecondSize) -> integer()@ 
append_element@erlang:append_element(Tuple1, Term) -> Tuple2@ 
apply@apply/2@ 
apply@apply/3@ 
atom_to_binary@atom_to_binary(Atom, Encoding) -> binary()@ 
atom_to_list@atom_to_list(Atom) -> string()@ 
binary_part@binary_part(Subject, PosLen) -> binary()@ 
binary_part@binary_part(Subject, Start, Length) -> binary()@ 
binary_to_atom@binary_to_atom(Binary, Encoding) -> atom()@ 
binary_to_existing_atom@binary_to_existing_atom(Binary, Encoding) -> atom()@ 
binary_to_list@binary_to_list(Binary) -> [char()]@ 
binary_to_list@binary_to_list(Binary, Start, Stop) -> [char()]@ 
bitstring_to_list@bitstring_to_list(Bitstring) -> [char()|bitstring()]@ 
binary_to_term@binary_to_term(Binary) -> term()@ 
binary_to_term@binary_to_term(Binary, Opts) -> term()@ 
bit_size@bit_size(Bitstring) -> integer() >= 0@ 
bump_reductions@erlang:bump_reductions(Reductions) -> void()@ 
byte_size@byte_size(Bitstring) -> integer() >= 0@ 
cancel_timer@erlang:cancel_timer(TimerRef) -> Time | false@ 
check_old_code@check_old_code(Module) -> boolean()@ 
check_process_code@check_process_code(Pid, Module) -> boolean()@ 
crc32@erlang:crc32(Data) -> integer() >= 0@ 
crc32@erlang:crc32(OldCrc, Data) -> integer() >= 0@ 
crc32_combine@erlang:crc32_combine(FirstCrc, SecondCrc, SecondSize) -> integer() >= 0@ 
date@date() -> Date@ 
decode_packet@erlang:decode_packet(Type,Bin,Options) -> {ok,Packet,Rest} | {more,Length} | {error,Reason}@ 
delete_module@delete_module(Module) -> true | undefined@ 
demonitor@demonitor(MonitorRef) -> true@ 
demonitor@demonitor(MonitorRef, OptionList) -> boolean()@ 
disconnect_node@disconnect_node/1@ 
display@erlang:display(Term) -> true@ 
element@element(N, Tuple) -> term()@ 
erase@erase() -> [{Key, Val}]@ 
erase@erase(Key) -> Val | undefined@ 
error@error(Reason)@ 
error@error(Reason, Args)@ 
exit@exit(Reason)@ 
exit@exit(Pid, Reason) -> true@ 
external_size@erlang:external_size(Term) -> integer() >= 0@ 
external_size@erlang:external_size(Term, [Option]) -> integer() >= 0@ 
float@float(Number) -> float()@ 
float_to_list@float_to_list(Float) -> string()@ 
fun_info@fun_info/1@ 
fun_info@erlang:fun_info(Fun, Item) -> {Item, Info}@ 
fun_to_list@erlang:fun_to_list(Fun) -> string()@ 
function_exported@erlang:function_exported(Module, Function, Arity) -> boolean()@ 
garbage_collect@garbage_collect() -> true@ 
garbage_collect@garbage_collect(Pid) -> boolean()@ 
get@get() -> [{Key, Val}]@ 
get@get(Key) -> Val | undefined@ 
get_cookie@get_cookie/0@ 
get_keys@get_keys(Val) -> [Key]@ 
get_stacktrace@erlang:get_stacktrace() -> [{Module, Function, Arity | Args, Location}]@ 
group_leader@group_leader() -> GroupLeader@ 
group_leader@group_leader(GroupLeader, Pid) -> true@ 
halt@halt()@ 
halt@halt(Status)@ 
hash@erlang:hash(Term, Range) -> Hash@ 
hd@hd(List) -> term()@ 
hibernate@erlang:hibernate(Module, Function, Args)@ 
integer_to_list@integer_to_list(Integer) -> string()@ 
integer_to_list@integer_to_list/2@ 
iolist_to_binary@iolist_to_binary(IoListOrBinary) -> binary()@ 
iolist_size@iolist_size(Item) -> integer() >= 0@ 
is_alive@is_alive() -> boolean()@ 
is_atom@is_atom(Term) -> boolean()@ 
is_binary@is_binary(Term) -> boolean()@ 
is_bitstring@is_bitstring(Term) -> boolean()@ 
is_boolean@is_boolean(Term) -> boolean()@ 
is_builtin@erlang:is_builtin(Module, Function, Arity) -> boolean()@ 
is_float@is_float(Term) -> boolean()@ 
is_function@is_function(Term) -> boolean()@ 
is_function@is_function(Term, Arity) -> boolean()@ 
is_integer@is_integer(Term) -> boolean()@ 
is_list@is_list(Term) -> boolean()@ 
is_number@is_number(Term) -> boolean()@ 
is_pid@is_pid(Term) -> boolean()@ 
is_port@is_port(Term) -> boolean()@ 
is_process_alive@is_process_alive(Pid) -> boolean()@ 
is_record@is_record(Term, RecordTag) -> boolean()@ 
is_record@is_record(Term, RecordTag, Size) -> boolean()@ 
is_reference@is_reference(Term) -> boolean()@ 
is_tuple@is_tuple(Term) -> boolean()@ 
length@length(List) -> integer() >= 0@ 
link@link(Pid) -> true@ 
list_to_atom@list_to_atom(String) -> atom()@ 
list_to_binary@list_to_binary(IoList) -> binary()@ 
list_to_bitstring@list_to_bitstring(BitstringList) -> bitstring()@ 
list_to_existing_atom@list_to_existing_atom(String) -> atom()@ 
list_to_float@list_to_float(String) -> float()@ 
list_to_integer@list_to_integer(String) -> integer()@ 
list_to_integer@list_to_integer/2@ 
list_to_pid@list_to_pid(String) -> pid()@ 
list_to_tuple@list_to_tuple(List) -> tuple()@ 
load_module@load_module(Module, Binary) -> {module, Module} | {error, Reason}@ 
load_nif@erlang:load_nif(Path, LoadInfo) -> ok | {error, {Reason, Text}}@ 
loaded@erlang:loaded() -> [Module]@ 
localtime@erlang:localtime() -> DateTime@ 
localtime_to_universaltime@localtime_to_universaltime/1@ 
localtime_to_universaltime@erlang:localtime_to_universaltime({Date1, Time1}, IsDst) -> {Date2, Time2}@ 
make_ref@make_ref() -> reference()@ 
make_tuple@erlang:make_tuple(Arity, InitialValue) -> tuple()@ 
make_tuple@erlang:make_tuple(Arity, Default, InitList) -> tuple()@ 
max@max/2@ 
md5@erlang:md5(Data) -> Digest@ 
md5_final@erlang:md5_final(Context) -> Digest@ 
md5_init@erlang:md5_init() -> Context@ 
md5_update@erlang:md5_update(Context, Data) -> NewContext@ 
memory@erlang:memory() -> [{Type, Size}]@ 
memory@erlang:memory(Type | [Type]) -> Size | [{Type, Size}]@ 
min@min/2@ 
module_loaded@module_loaded(Module) -> boolean()@ 
monitor@monitor(Type, Item) -> MonitorRef@ 
monitor_node@monitor_node(Node, Flag) -> true@ 
monitor_node@erlang:monitor_node(Node, Flag, Options) -> true@ 
nif_error@erlang:nif_error(Reason)@ 
nif_error@erlang:nif_error(Reason, Args)@ 
node@node() -> Node@ 
node@node(Arg) -> Node@ 
nodes@nodes/0@ 
nodes@nodes(Arg | [Arg]) -> Nodes@ 
now@now() -> timestamp()@ 
open_port@open_port(PortName, PortSettings) -> port()@ 
phash@erlang:phash(Term, Range) -> Hash@ 
phash2@erlang:phash2(Term [, Range]) -> Hash@ 
pid_to_list@pid_to_list(Pid) -> string()@ 
port_close@port_close(Port) -> true@ 
port_command@port_command(Port, Data) -> true@ 
port_command@port_command(Port, Data, OptionList) -> boolean()@ 
port_connect@port_connect(Port, Pid) -> true@ 
port_control@port_control(Port, Operation, Data) -> Res@ 
port_call@erlang:port_call(Port, Operation, Data) -> term()@ 
port_info@erlang:port_info(Port) -> [{Item, Info}] | undefined@ 
port_info@erlang:port_info(Port, Item) -> {Item, Info} | undefined | []@ 
port_to_list@erlang:port_to_list(Port) -> string()@ 
ports@erlang:ports() -> [port()]@ 
pre_loaded@pre_loaded() -> [Module]@ 
process_display@erlang:process_display(Pid, Type) -> void()@ 
process_flag@process_flag(Flag, Value) -> OldValue@ 
process_flag@process_flag(Pid, Flag, Value) -> OldValue@ 
process_info@process_info(Pid) -> InfoResult@ 
process_info@process_info(Pid, ItemSpec) -> InfoResult@ 
processes@processes() -> [pid()]@ 
purge_module@purge_module(Module) -> void()@ 
put@put(Key, Val) -> OldVal | undefined@ 
raise@erlang:raise(Class, Reason, Stacktrace)@ 
read_timer@erlang:read_timer(TimerRef) -> integer() >= 0 | false@ 
ref_to_list@erlang:ref_to_list(Ref) -> string()@ 
register@register(RegName, Pid | Port) -> true@ 
registered@registered() -> [RegName]@ 
resume_process@erlang:resume_process(Suspendee) -> true@ 
round@round(Number) -> integer()@ 
self@self() -> pid()@ 
send@erlang:send(Dest, Msg) -> Msg@ 
send@erlang:send(Dest, Msg, [Option]) -> Res@ 
send_after@erlang:send_after(Time, Dest, Msg) -> TimerRef@ 
send_nosuspend@send_nosuspend/2@ 
send_nosuspend@send_nosuspend/3@ 
set_cookie@set_cookie/2@ 
setelement@setelement(Index, Tuple1, Value) -> Tuple2@ 
size@size(Item) -> integer() >= 0@ 
spawn@spawn/1@ 
spawn@spawn/2@ 
spawn@spawn(Module, Function, Args) -> pid()@ 
spawn@spawn/4@ 
spawn_link@spawn_link/1@ 
spawn_link@spawn_link/2@ 
spawn_link@spawn_link(Module, Function, Args) -> pid()@ 
spawn_link@spawn_link/4@ 
spawn_monitor@spawn_monitor/1@ 
spawn_monitor@spawn_monitor/3@ 
spawn_opt@spawn_opt/2@ 
spawn_opt@spawn_opt/3@ 
spawn_opt@spawn_opt/4@ 
spawn_opt@spawn_opt/5@ 
split_binary@split_binary(Bin, Pos) -> {Bin1, Bin2}@ 
start_timer@erlang:start_timer(Time, Dest, Msg) -> TimerRef@ 
statistics@statistics(Type) -> Res@ 
suspend_process@erlang:suspend_process(Suspendee, OptList) -> boolean()@ 
suspend_process@suspend_process/1@ 
system_flag@erlang:system_flag(Flag, Value) -> OldValue@ 
system_info@erlang:system_info(Type) -> Res@ 
system_monitor@erlang:system_monitor() -> MonSettings@ 
system_monitor@erlang:system_monitor(undefined | {MonitorPid, Options}) -> MonSettings@ 
system_profile@erlang:system_profile() -> ProfilerSettings@ 
system_profile@erlang:system_profile(ProfilerPid, Options) -> ProfilerSettings@ 
term_to_binary@term_to_binary(Term) -> ext_binary()@ 
term_to_binary@term_to_binary(Term, [Option]) -> ext_binary()@ 
throw@throw(Any)@ 
time@time() -> {Hour, Minute, Second}@ 
tl@tl(List1) -> List2@ 
trace@erlang:trace(PidSpec, How, FlagList) -> integer() >= 0@ 
trace_delivered@erlang:trace_delivered(Tracee) -> Ref@ 
trace_info@erlang:trace_info(PidOrFunc, Item) -> Res@ 
trace_pattern@erlang:trace_pattern(MFA, MatchSpec) -> integer() >= 0@ 
trace_pattern@erlang:trace_pattern(MFA, MatchSpec, FlagList) -> integer() >= 0@ 
trunc@trunc(Number) -> integer()@ 
tuple_size@tuple_size(Tuple) -> integer() >= 0@ 
tuple_to_list@tuple_to_list(Tuple) -> [term()]@ 
universaltime@erlang:universaltime() -> DateTime@ 
universaltime_to_localtime@erlang:universaltime_to_localtime({Date1, Time1}) -> {Date2, Time2}@ 
unlink@unlink(Id) -> true@ 
unregister@unregister(RegName) -> true@ 
whereis@whereis(RegName) -> pid() | port() | undefined@ 
yield@yield/0@ 
