map@map(F::Function, Tree::syntaxTree()) -> syntaxTree()
map_subtrees@map_subtrees(F::Function, Tree::syntaxTree()) -> syntaxTree()
fold@fold(F::Function, Start::term(), Tree::syntaxTree()) -> term()
fold_subtrees@fold_subtrees(F::Function, Start::term(), Tree::syntaxTree()) -> term()
foldl_listlist@foldl_listlist(F::Function, Start::term(), Ls::[[term()]]) -> term()
mapfold@mapfold(F::Function, Start::term(), Tree::syntaxTree()) -> {syntaxTree(), term()}
mapfold_subtrees@mapfold_subtrees(F::Function, Start::term(), Tree::syntaxTree()) -> {syntaxTree(), term()}
mapfoldl_listlist@mapfoldl_listlist(F::Function, S::State, Ls::[[term()]]) -> {[[term()]], term()}
variables@variables(Tree::syntaxTree()) -> set(atom())
new_variable_name@new_variable_name(Used::set(atom())) -> atom()
new_variable_name@new_variable_name(F::Function, Used::set(atom())) -> atom()
new_variable_names@new_variable_names(N::integer(), Used::set(atom())) -> [atom()]
annotate_bindings@annotate_bindings(Tree::syntaxTree(), Bindings::ordset(atom())) -> syntaxTree()
is_fail_expr@is_fail_expr(Tree::syntaxTree()) -> boolean()
analyze_forms@analyze_forms(Forms) -> [{Key, term()}]
analyze_form@analyze_form(Node::syntaxTree()) -> {atom(), term()} | atom()
analyze_attribute@analyze_attribute(Node::syntaxTree()) -> preprocessor | {atom(), atom()}
analyze_module_attribute@analyze_module_attribute(Node::syntaxTree()) -> Name::atom() | {Name::atom(), Variables::[atom()]}
analyze_export_attribute@analyze_export_attribute(Node::syntaxTree()) -> [FunctionName]
analyze_function_name@analyze_function_name(Node::syntaxTree()) -> FunctionName
analyze_import_attribute@analyze_import_attribute(Node::syntaxTree()) -> {atom(), [FunctionName]} | atom()
analyze_wild_attribute@analyze_wild_attribute(Node::syntaxTree()) -> {atom(), term()}
analyze_record_attribute@analyze_record_attribute(Node::syntaxTree()) -> {atom(), Fields}
analyze_record_expr@analyze_record_expr(Node::syntaxTree()) -> {atom(), Info} | atom()
analyze_record_field@analyze_record_field(Node::syntaxTree()) -> {atom(), Value}
analyze_file_attribute@analyze_file_attribute(Node::syntaxTree()) -> {string(), integer()}
analyze_function@analyze_function(Node::syntaxTree()) -> {atom(), integer()}
analyze_rule@analyze_rule(Node::syntaxTree()) -> {atom(), integer()}
analyze_implicit_fun@analyze_implicit_fun(Node::syntaxTree()) -> FunctionName
analyze_application@analyze_application(Node::syntaxTree()) -> FunctionName | Arity
function_name_expansions@function_name_expansions(Names::[Name]) -> [{ShortName, Name}]
strip_comments@strip_comments(Tree::syntaxTree()) -> syntaxTree()
to_comment@to_comment(Tree) -> syntaxTree()
limit@limit(Tree, Depth) -> syntaxTree()
limit@limit(Tree::syntaxTree(), Depth::integer(), Node::syntaxTree()) -> syntaxTree()
