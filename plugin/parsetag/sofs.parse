a_function@a_function(Tuples) -> Function@ Function =  Tuples = [tuple()]   
a_function@a_function(Tuples, Type) -> Function@ Function =  Tuples = [tuple()] Type =  type()    
canonical_relation@canonical_relation(SetOfSets) -> BinRel@ BinRel =  SetOfSets =  set_of_sets()    
composite@composite(Function1, Function2) -> Function3@ Function1 = Function2 = Function3 =  a_function()    
constant_function@constant_function(Set, AnySet) -> Function@ AnySet =  Function =  Set =  a_set()    
converse@converse(BinRel1) -> BinRel2@ BinRel1 = BinRel2 =  binary_relation()    
difference@difference(Set1, Set2) -> Set3@ Set1 = Set2 = Set3 =  a_set()    
digraph_to_family@digraph_to_family(Graph) -> Family@ Graph = digraph() Family =  family()    
digraph_to_family@digraph_to_family(Graph, Type) -> Family@ Graph = digraph() Family =  Type =  type()    
domain@domain(BinRel) -> Set@ BinRel =  Set =  a_set()    
drestriction@drestriction(BinRel1, Set) -> BinRel2@ BinRel1 = BinRel2 =  Set =  a_set()    
drestriction@drestriction(SetFun, Set1, Set2) -> Set3@ SetFun =  Set1 = Set2 = Set3 =  a_set()    
empty_set@empty_set() -> Set@ Set =  a_set()    
extension@extension(BinRel1, Set, AnySet) -> BinRel2@ AnySet =  BinRel1 = BinRel2 =  Set =  a_set()    
family@family(Tuples) -> Family@ Family =  Tuples = [tuple()]   
family@family(Tuples, Type) -> Family@ Family =  Tuples = [tuple()] Type =  type()    
family_difference@family_difference(Family1, Family2) -> Family3@ Family1 = Family2 = Family3 =  family()    
family_domain@family_domain(Family1) -> Family2@ Family1 = Family2 =  family()    
family_field@family_field(Family1) -> Family2@ Family1 = Family2 =  family()    
family_intersection@family_intersection(Family1) -> Family2@ Family1 = Family2 =  family()    
family_intersection@family_intersection(Family1, Family2) -> Family3@ Family1 = Family2 = Family3 =  family()    
family_projection@family_projection(SetFun, Family1) -> Family2@ SetFun =  Family1 = Family2 =  family()    
family_range@family_range(Family1) -> Family2@ Family1 = Family2 =  family()    
family_specification@family_specification(Fun, Family1) -> Family2@ Fun =  Family1 = Family2 =  family()    
family_to_digraph@family_to_digraph(Family) -> Graph@ Graph = digraph() Family =  family()    
family_to_digraph@family_to_digraph(Family, GraphType) -> Graph@ Graph = digraph() Family =  GraphType = [ digraph:d_type() ]   
family_to_relation@family_to_relation(Family) -> BinRel@ Family =  BinRel =  binary_relation()    
family_union@family_union(Family1) -> Family2@ Family1 = Family2 =  family()    
family_union@family_union(Family1, Family2) -> Family3@ Family1 = Family2 = Family3 =  family()    
field@field(BinRel) -> Set@ BinRel =  Set =  a_set()    
from_external@from_external(ExternalSet, Type) -> AnySet@ ExternalSet =  AnySet =  Type =  type()    
from_sets@from_sets(ListOfSets) -> Set</h3><h3>from_sets(TupleOfSets) -> Ordset@ Set =  ListOfSets = [ Ordset =  TupleOfSets =  tuple_of ( anyset() )   
from_term@from_term(Term) -> AnySet@ AnySet =  Term = term()   
from_term@from_term(Term, Type) -> AnySet@ AnySet =  Term = term() Type =  type()    
image@image(BinRel, Set1) -> Set2@ BinRel =  Set1 = Set2 =  a_set()    
intersection@intersection(SetOfSets) -> Set@ Set =  SetOfSets =  set_of_sets()    
intersection@intersection(Set1, Set2) -> Set3@ Set1 = Set2 = Set3 =  a_set()    
intersection_of_family@intersection_of_family(Family) -> Set@ Family =  Set =  a_set()    
inverse@inverse(Function1) -> Function2@ Function1 = Function2 =  a_function()    
inverse_image@inverse_image(BinRel, Set1) -> Set2@ BinRel =  Set1 = Set2 =  a_set()    
is_a_function@is_a_function(BinRel) -> Bool@ Bool = boolean() BinRel =  binary_relation()    
is_disjoint@is_disjoint(Set1, Set2) -> Bool@ Bool = boolean() Set1 = Set2 =  a_set()    
is_empty_set@is_empty_set(AnySet) -> Bool@ AnySet =  Bool = boolean()   
is_equal@is_equal(AnySet1, AnySet2) -> Bool@ AnySet1 = AnySet2 =  Bool = boolean()   
is_set@is_set(AnySet) -> Bool@ AnySet =  Bool = boolean()   
is_sofs_set@is_sofs_set(Term) -> Bool@ Bool = boolean() Term = term()   
is_subset@is_subset(Set1, Set2) -> Bool@ Bool = boolean() Set1 = Set2 =  a_set()    
is_type@is_type(Term) -> Bool@ Bool = boolean() Term = term()   
join@join(Relation1, I, Relation2, J) -> Relation3@ Relation1 = Relation2 = Relation3 =  I = J = integer() >= 1   
multiple_relative_product@multiple_relative_product(TupleOfBinRels, BinRel1) -> BinRel2@ TupleOfBinRels =  BinRel = BinRel1 = BinRel2 =  binary_relation()    
no_elements@no_elements(ASet) -> NoElements@ ASet =  NoElements = integer() >= 0   
partition@partition(SetOfSets) -> Partition@ SetOfSets =  Partition =  a_set()    
partition@partition(SetFun, Set) -> Partition@ SetFun =  Partition = Set =  a_set()    
partition@partition(SetFun, Set1, Set2) -> {Set3, Set4}@ SetFun =  Set1 = Set2 = Set3 = Set4 =  a_set()    
partition_family@partition_family(SetFun, Set) -> Family@ Family =  SetFun =  Set =  a_set()    
product@product(TupleOfSets) -> Relation@ Relation =  TupleOfSets =  tuple_of ( a_set() )   
product@product(Set1, Set2) -> BinRel@ BinRel =  Set1 = Set2 =  a_set()    
projection@projection(SetFun, Set1) -> Set2@ SetFun =  Set1 = Set2 =  a_set()    
range@range(BinRel) -> Set@ BinRel =  Set =  a_set()    
relation@relation(Tuples) -> Relation@ Relation =  Tuples = [tuple()]   
relation@relation(Tuples, Type) -> Relation@ N = integer() Type = N |  Relation =  Tuples = [tuple()]   
relation_to_family@relation_to_family(BinRel) -> Family@ Family =  BinRel =  binary_relation()    
relative_product@relative_product(ListOfBinRels) -> BinRel2@ ListOfBinRels = [BinRel, ...] BinRel = BinRel2 =  binary_relation()    
relative_product@relative_product(ListOfBinRels, BinRel1) -> BinRel2</h3><h3>relative_product(BinRel1, BinRel2) -> BinRel3@ ListOfBinRels = [BinRel, ...] BinRel = BinRel1 = BinRel2 =  BinRel1 = BinRel2 = BinRel3 =  binary_relation()    
relative_product1@relative_product1(BinRel1, BinRel2) -> BinRel3@ BinRel1 = BinRel2 = BinRel3 =  binary_relation()    
restriction@restriction(BinRel1, Set) -> BinRel2@ BinRel1 = BinRel2 =  Set =  a_set()    
restriction@restriction(SetFun, Set1, Set2) -> Set3@ SetFun =  Set1 = Set2 = Set3 =  a_set()    
set@set(Terms) -> Set@ Set =  Terms = [term()]   
set@set(Terms, Type) -> Set@ Set =  Terms = [term()] Type =  type()    
specification@specification(Fun, Set1) -> Set2@ Fun =  Set1 = Set2 =  a_set()    
strict_relation@strict_relation(BinRel1) -> BinRel2@ BinRel1 = BinRel2 =  binary_relation()    
substitution@substitution(SetFun, Set1) -> Set2@ SetFun =  Set1 = Set2 =  a_set()    
symdiff@symdiff(Set1, Set2) -> Set3@ Set1 = Set2 = Set3 =  a_set()    
symmetric_partition@symmetric_partition(Set1, Set2) -> {Set3, Set4, Set5}@ Set1 = Set2 = Set3 = Set4 = Set5 =  a_set()    
to_external@to_external(AnySet) -> ExternalSet@ ExternalSet =  AnySet =  anyset()    
to_sets@to_sets(ASet) -> Sets@ ASet =  Sets =  AnySet =  anyset()    
type@type(AnySet) -> Type@ AnySet =  Type =  type()    
union@union(SetOfSets) -> Set@ Set =  SetOfSets =  set_of_sets()    
union@union(Set1, Set2) -> Set3@ Set1 = Set2 = Set3 =  a_set()    
union_of_family@union_of_family(Family) -> Set@ Family =  Set =  a_set()    
weak_relation@weak_relation(BinRel1) -> BinRel2@ BinRel1 = BinRel2 =  binary_relation()    
