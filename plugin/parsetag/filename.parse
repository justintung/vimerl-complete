absname@absname(Filename) -> file:filename() @ Filename =  file:name()    
absname@absname(Filename, Dir) -> file:filename() @ Filename =  Dir =  file:filename()    
absname_join@absname_join(Dir, Filename) -> file:filename() @ Dir =  Filename =  file:name()    
basename@basename(Filename) -> file:filename() @ Filename =  file:name()    
basename@basename(Filename, Ext) -> file:filename() @ Filename = Ext =  file:name()    
dirname@dirname(Filename) -> file:filename() @ Filename =  file:name()    
extension@extension(Filename) -> file:filename() @ Filename =  file:name()    
flatten@flatten(Filename) -> file:filename() @ Filename =  file:name()    
join@join(Components) -> file:filename() @ Components = [ file:filename() ]   
join@join(Name1, Name2) -> file:filename() @ Name1 = Name2 =  file:filename()    
nativename@nativename(Path) -> file:filename() @ Path =  file:filename()    
pathtype@pathtype(Path) -> absolute | relative | volumerelative@ Path =  file:name()    
rootname@rootname(Filename) -> file:filename() @ Filename =  file:name()    
rootname@rootname(Filename, Ext) -> file:filename() @ Filename = Ext =  file:name()    
split@split(Filename) -> Components@ Filename =  Components = [ file:filename() ]   
find_src@find_src(Beam) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{SourceFile, Options} | {error, {ErrorReason, Module}}@ Beam = Module | Filename Filename = atom() | string() Module = module() SourceFile = string() Options = [Option] Option = {i, Path :: string()} ErrorReason = non_existing | preloaded | interpreted   
find_src@find_src(Beam, Rules) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{SourceFile, Options} | {error, {ErrorReason, Module}}@ Beam = Module | Filename Filename = atom() | string() Rules = [{BinSuffix :: string(), SourceSuffix :: string()}] Module = module() SourceFile = string() Options = [Option] Option = {i, Path :: string()} ErrorReason = non_existing | preloaded | interpreted   
