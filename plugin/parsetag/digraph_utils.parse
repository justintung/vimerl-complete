arborescence_root@arborescence_root(Digraph) -> no | {yes, Root}@ Digraph = digraph() Root =  digraph:vertex()    
components@components(Digraph) -> [Component]@ Digraph = digraph() Component = [ digraph:vertex() ]   
condensation@condensation(Digraph) -> CondensedDigraph@ Digraph = CondensedDigraph = digraph()   
cyclic_strong_components@cyclic_strong_components(Digraph) -> [StrongComponent]@ Digraph = digraph() StrongComponent = [ digraph:vertex() ]   
is_acyclic@is_acyclic(Digraph) -> boolean()@ Digraph = digraph()   
is_arborescence@is_arborescence(Digraph) -> boolean()@ Digraph = digraph()   
is_tree@is_tree(Digraph) -> boolean()@ Digraph = digraph()   
loop_vertices@loop_vertices(Digraph) -> Vertices@ Digraph = digraph() Vertices = [ digraph:vertex() ]   
postorder@postorder(Digraph) -> Vertices@ Digraph = digraph() Vertices = [ digraph:vertex() ]   
preorder@preorder(Digraph) -> Vertices@ Digraph = digraph() Vertices = [ digraph:vertex() ]   
reachable@reachable(Vertices, Digraph) -> Reachable@ Digraph = digraph() Vertices = Reachable = [ digraph:vertex() ]   
reachable_neighbours@reachable_neighbours(Vertices, Digraph) -> Reachable@ Digraph = digraph() Vertices = Reachable = [ digraph:vertex() ]   
reaching@reaching(Vertices, Digraph) -> Reaching@ Digraph = digraph() Vertices = Reaching = [ digraph:vertex() ]   
reaching_neighbours@reaching_neighbours(Vertices, Digraph) -> Reaching@ Digraph = digraph() Vertices = Reaching = [ digraph:vertex() ]   
strong_components@strong_components(Digraph) -> [StrongComponent]@ Digraph = digraph() StrongComponent = [ digraph:vertex() ]   
subgraph@subgraph(Digraph, Vertices) -> SubGraph@ Digraph = digraph() Vertices = [ SubGraph = digraph()   
subgraph@subgraph(Digraph, Vertices, Options) -> SubGraph@ Digraph = SubGraph = digraph() Vertices = [ Options = [{type, SubgraphType} | {keep_labels, boolean()}] SubgraphType = inherit | [ digraph:d_type() ]   
topsort@topsort(Digraph) -> Vertices | false@ Digraph = digraph() Vertices = [ digraph:vertex() ]   
