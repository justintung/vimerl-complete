start@start() -> ok@ 
apply_after@apply_after(Time, Module, Function, Arguments) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ok, TRef} | {error, Reason}@ Time =  Module = module() Function = atom() Arguments = [term()] TRef =  Reason = term()   
send_after@send_after(Time, Message) -> {ok, TRef} | {error, Reason}@ Time =  Message = term() TRef =  Reason = term()   
send_after@send_after(Time, Pid, Message) -> {ok, TRef} | {error, Reason}@ Time =  Pid = pid() | (RegName :: atom()) Message = term() TRef =  Reason = term()   
kill_after@kill_after(Time) -> {ok, TRef} | {error, Reason2}@ Time =  TRef =  Reason2 = term()   
kill_after@kill_after(Time, Pid) -> {ok, TRef} | {error, Reason2}@ Time =  Pid = pid() | (RegName :: atom()) TRef =  Reason2 = term()   
exit_after@exit_after(Time, Reason1) -> {ok, TRef} | {error, Reason2}@ Time =  TRef =  Reason1 = Reason2 = term()   
exit_after@exit_after(Time, Pid, Reason1) -> {ok, TRef} | {error, Reason2}@ Time =  Pid = pid() | (RegName :: atom()) TRef =  Reason1 = Reason2 = term()   
apply_interval@apply_interval(Time, Module, Function, Arguments) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ok, TRef} | {error, Reason}@ Time =  Module = module() Function = atom() Arguments = [term()] TRef =  Reason = term()   
send_interval@send_interval(Time, Message) -> {ok, TRef} | {error, Reason}@ Time =  Message = term() TRef =  Reason = term()   
send_interval@send_interval(Time, Pid, Message) -> {ok, TRef} | {error, Reason}@ Time =  Pid = pid() | (RegName :: atom()) Message = term() TRef =  Reason = term()   
cancel@cancel(TRef) -> {ok, cancel} | {error, Reason}@ TRef =  Reason = term()   
sleep@sleep(Time) -> ok@ Time = timeout()   
tc@tc(Fun) -> {Time, Value}@ Fun = function() Time = integer() Value = term()   
tc@tc(Fun, Arguments) -> {Time, Value}@ Fun = function() Arguments = [term()] Time = integer() Value = term()   
tc@tc(Module, Function, Arguments) -> {Time, Value}@ Module = module() Function = atom() Arguments = [term()] Time = integer() Value = term()   
now_diff@now_diff(T2, T1) -> Tdiff@ T1 = T2 =  Tdiff = integer()   
seconds@seconds(Seconds) -> MilliSeconds@ Seconds = MilliSeconds = integer() >= 0   
minutes@minutes(Minutes) -> MilliSeconds@ Minutes = MilliSeconds = integer() >= 0   
hours@hours(Hours) -> MilliSeconds@ Hours = MilliSeconds = integer() >= 0   
hms@hms(Hours, Minutes, Seconds) -> MilliSeconds@ Hours = Minutes = Seconds = MilliSeconds = integer() >= 0   
