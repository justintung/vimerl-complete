all@all(Pred, List) -> boolean()@ Pred = fun((Elem :: T) -> boolean()) List = [T] T = term()   
any@any(Pred, List) -> boolean()@ Pred = fun((Elem :: T) -> boolean()) List = [T] T = term()   
append@append(ListOfLists) -> List1@ ListOfLists = [List] List = List1 = [T] T = term()   
append@append(List1, List2) -> List3@ List1 = List2 = List3 = [T] T = term()   
concat@concat(Things) -> string()@ Things = [Thing] Thing = atom() | integer() | float() | string()   
delete@delete(Elem, List1) -> List2@ Elem = T List1 = List2 = [T] T = term()   
dropwhile@dropwhile(Pred, List1) -> List2@ Pred = fun((Elem :: T) -> boolean()) List1 = List2 = [T] T = term()   
duplicate@duplicate(N, Elem) -> List@ N = integer() >= 0 Elem = T List = [T] T = term()   
filter@filter(Pred, List1) -> List2@ Pred = fun((Elem :: T) -> boolean()) List1 = List2 = [T] T = term()   
flatlength@flatlength(DeepList) -> integer() >= 0@ DeepList = [term() | DeepList]   
flatmap@flatmap(Fun, List1) -> List2@ Fun = fun((A) -> [B]) List1 = [A] List2 = [B] A = B = term()   
flatten@flatten(DeepList) -> List@ DeepList = [term() | DeepList] List = [term()]   
flatten@flatten(DeepList, Tail) -> List@ DeepList = [term() | DeepList] Tail = List = [term()]   
foldl@foldl(Fun, Acc0, List) -> Acc1@ Fun = fun((Elem :: T, AccIn) -> AccOut) Acc0 = Acc1 = AccIn = AccOut = term() List = [T] T = term()   
foldr@foldr(Fun, Acc0, List) -> Acc1@ Fun = fun((Elem :: T, AccIn) -> AccOut) Acc0 = Acc1 = AccIn = AccOut = term() List = [T] T = term()   
foreach@foreach(Fun, List) -> ok@ Fun = fun((Elem :: T) -> term()) List = [T] T = term()   
keydelete@keydelete(Key, N, TupleList1) -> TupleList2@ Key = term() N = integer() >= 1 TupleList1 = TupleList2 = [Tuple] Tuple = tuple()   
keyfind@keyfind(Key, N, TupleList) -> Tuple | false@ 
keymap@keymap(Fun, N, TupleList1) -> TupleList2@ Fun = fun((Term1 :: term()) -> Term2 :: term()) N = integer() >= 1 TupleList1 = TupleList2 = [Tuple] Tuple = tuple()   
keymember@keymember(Key, N, TupleList) -> boolean()@ 
keymerge@keymerge(N, TupleList1, TupleList2) -> TupleList3@ N = integer() >= 1 TupleList1 = [T1] TupleList2 = [T2] TupleList3 = [(T1 | T2)] T1 = T2 = Tuple Tuple = tuple()   
keyreplace@keyreplace(Key, N, TupleList1, NewTuple) -> TupleList2@ Key = term() N = integer() >= 1 TupleList1 = TupleList2 = [Tuple] NewTuple = Tuple Tuple = tuple()   
keysearch@keysearch(Key, N, TupleList) -> {value, Tuple} | false@ 
keysort@keysort(N, TupleList1) -> TupleList2@ N = integer() >= 1 TupleList1 = TupleList2 = [Tuple] Tuple = tuple()   
keystore@keystore(Key, N, TupleList1, NewTuple) -> TupleList2@ Key = term() N = integer() >= 1 TupleList1 = [Tuple] TupleList2 = [Tuple, ...] NewTuple = Tuple Tuple = tuple()   
keytake@keytake(Key, N, TupleList1) -> {value, Tuple, TupleList2} | false@ Key = term() N = integer() >= 1 TupleList1 = TupleList2 = [tuple()] Tuple = tuple()   
last@last(List) -> Last@ List = [T, ...] Last = T T = term()   
map@map(Fun, List1) -> List2@ Fun = fun((A) -> B) List1 = [A] List2 = [B] A = B = term()   
mapfoldl@mapfoldl(Fun, Acc0, List1) -> {List2, Acc1}@ Fun = fun((A, AccIn) -> {B, AccOut}) Acc0 = Acc1 = AccIn = AccOut = term() List1 = [A] List2 = [B] A = B = term()   
mapfoldr@mapfoldr(Fun, Acc0, List1) -> {List2, Acc1}@ Fun = fun((A, AccIn) -> {B, AccOut}) Acc0 = Acc1 = AccIn = AccOut = term() List1 = [A] List2 = [B] A = B = term()   
max@max(List) -> Max@ List = [T, ...] Max = T T = term()   
member@member(Elem, List) -> boolean()@ 
merge@merge(ListOfLists) -> List1@ ListOfLists = [List] List = List1 = [T] T = term()   
merge@merge(List1, List2) -> List3@ List1 = [X] List2 = [Y] List3 = [(X | Y)] X = Y = term()   
merge@merge(Fun, List1, List2) -> List3@ Fun = fun((A, B) -> boolean()) List1 = [A] List2 = [B] List3 = [(A | B)] A = B = term()   
merge3@merge3(List1, List2, List3) -> List4@ List1 = [X] List2 = [Y] List3 = [Z] List4 = [(X | Y | Z)] X = Y = Z = term()   
min@min(List) -> Min@ List = [T, ...] Min = T T = term()   
nth@nth(N, List) -> Elem@ N = integer() >= 1 List = [T, ...] Elem = T T = term()   
nthtail@nthtail(N, List) -> Tail@ N = integer() >= 0 List = [T, ...] Tail = [T] T = term()   
partition@partition(Pred, List) -> {Satisfying, NotSatisfying}@ Pred = fun((Elem :: T) -> boolean()) List = Satisfying = NotSatisfying = [T] T = term()   
prefix@prefix(List1, List2) -> boolean()@ List1 = List2 = [T] T = term()   
reverse@reverse(List1) -> List2@ List1 = List2 = [T] T = term()   
reverse@reverse(List1, Tail) -> List2@ 
seq@seq(From, To) -> Seq@ From = To = integer() Seq = [integer()]   
seq@seq(From, To, Incr) -> Seq@ From = To = Incr = integer() Seq = [integer()]   
sort@sort(List1) -> List2@ List1 = List2 = [T] T = term()   
sort@sort(Fun, List1) -> List2@ Fun = fun((A :: T, B :: T) -> boolean()) List1 = List2 = [T] T = term()   
split@split(N, List1) -> {List2, List3}@ N = integer() >= 0 List1 = List2 = List3 = [T] T = term()   
splitwith@splitwith(Pred, List) -> {List1, List2}@ Pred = fun((T) -> boolean()) List = List1 = List2 = [T] T = term()   
sublist@sublist(List1, Len) -> List2@ List1 = List2 = [T] Len = integer() >= 0 T = term()   
sublist@sublist(List1, Start, Len) -> List2@ List1 = List2 = [T] Start = integer() >= 1 Len = integer() >= 0 T = term()   
subtract@subtract(List1, List2) -> List3@ List1 = List2 = List3 = [T] T = term()   
suffix@suffix(List1, List2) -> boolean()@ List1 = List2 = [T] T = term()   
sum@sum(List) -> number()@ List = [number()]   
takewhile@takewhile(Pred, List1) -> List2@ Pred = fun((Elem :: T) -> boolean()) List1 = List2 = [T] T = term()   
ukeymerge@ukeymerge(N, TupleList1, TupleList2) -> TupleList3@ N = integer() >= 1 TupleList1 = [T1] TupleList2 = [T2] TupleList3 = [(T1 | T2)] T1 = T2 = Tuple Tuple = tuple()   
ukeysort@ukeysort(N, TupleList1) -> TupleList2@ N = integer() >= 1 TupleList1 = TupleList2 = [Tuple] Tuple = tuple()   
umerge@umerge(ListOfLists) -> List1@ ListOfLists = [List] List = List1 = [T] T = term()   
umerge@umerge(List1, List2) -> List3@ List1 = [X] List2 = [Y] List3 = [(X | Y)] X = Y = term()   
umerge@umerge(Fun, List1, List2) -> List3@ Fun = fun((A, B) -> boolean()) List1 = [A] List2 = [B] List3 = [(A | B)] A = B = term()   
umerge3@umerge3(List1, List2, List3) -> List4@ List1 = [X] List2 = [Y] List3 = [Z] List4 = [(X | Y | Z)] X = Y = Z = term()   
unzip@unzip(List1) -> {List2, List3}@ List1 = [{A, B}] List2 = [A] List3 = [B] A = B = term()   
unzip3@unzip3(List1) -> {List2, List3, List4}@ List1 = [{A, B, C}] List2 = [A] List3 = [B] List4 = [C] A = B = C = term()   
usort@usort(List1) -> List2@ List1 = List2 = [T] T = term()   
usort@usort(Fun, List1) -> List2@ Fun = fun((T, T) -> boolean()) List1 = List2 = [T] T = term()   
zip@zip(List1, List2) -> List3@ List1 = [A] List2 = [B] List3 = [{A, B}] A = B = term()   
zip3@zip3(List1, List2, List3) -> List4@ List1 = [A] List2 = [B] List3 = [C] List4 = [{A, B, C}] A = B = C = term()   
zipwith@zipwith(Combine, List1, List2) -> List3@ Combine = fun((X, Y) -> T) List1 = [X] List2 = [Y] List3 = [T] X = Y = T = term()   
zipwith3@zipwith3(Combine, List1, List2, List3) -> List4@ Combine = fun((X, Y, Z) -> T) List1 = [X] List2 = [Y] List3 = [Z] List4 = [T] X = Y = Z = T = term()   
