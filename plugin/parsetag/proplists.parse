append_values@append_values(Key, List) -> List@ Key = term() List = [term()]   
compact@compact(List) -> List@ List = [ property() ]   
delete@delete(Key, List) -> List@ Key = term() List = [term()]   
expand@expand(Expansions, List) -> List@ Expansions = [{Property ::  List = [term()]   
get_all_values@get_all_values(Key, List) -> [term()]@ Key = term() List = [term()]   
get_bool@get_bool(Key, List) -> boolean()@ Key = term() List = [term()]   
get_keys@get_keys(List) -> [term()]@ List = [term()]   
get_value@get_value(Key, List) -> term()@ Key = term() List = [term()]   
get_value@get_value(Key, List, Default) -> term()@ Key = term() List = [term()] Default = term()   
is_defined@is_defined(Key, List) -> boolean()@ Key = term() List = [term()]   
lookup@lookup(Key, List) -> none | tuple()@ Key = term() List = [term()]   
lookup_all@lookup_all(Key, List) -> [tuple()]@ Key = term() List = [term()]   
normalize@normalize(List, Stages) -> List@ List = [term()] Stages = [Operation] Operation = {aliases, Aliases} Aliases = Negations = [{Key, Key}] Expansions = [{Property ::  property() , Expansion :: [term()]}]   
property@property(Property) -> Property@ Property =  property()    
property@property(Key, Value) -> Property@ Key = Value = term() Property = atom() | {term(), term()}   
split@split(List, Keys) -> {Lists, Rest}@ List = Keys = [term()] Lists = [[term()]] Rest = [term()]   
substitute_aliases@substitute_aliases(Aliases, List) -> List@ Aliases = [{Key, Key}] Key = term() List = [term()]   
substitute_negations@substitute_negations(Negations, List) -> List@ Negations = [{Key, Key}] Key = term() List = [term()]   
unfold@unfold(List) -> List@ List = [term()]   
