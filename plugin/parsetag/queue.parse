new@new() -> queue()@ 
is_queue@is_queue(Term :: term()) -> boolean()@ 
is_empty@is_empty(Q :: queue()) -> boolean()@ 
len@len(Q :: queue()) -> integer() >= 0@ 
in@in(Item :: term(), Q1 :: queue()) -> Q2 :: queue()@ 
in_r@in_r(Item :: term(), Q1 :: queue()) -> Q2 :: queue()@ 
out@out(Q1 :: queue()) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{value, Item :: term()}, Q2 :: queue()} |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{empty, Q1 :: queue()}@ 
out_r@out_r(Q1 :: queue()) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{value, Item :: term()}, Q2 :: queue()} |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{empty, Q1 :: queue()}@ 
from_list@from_list(L :: list()) -> queue()@ 
to_list@to_list(Q :: queue()) -> list()@ 
reverse@reverse(Q1 :: queue()) -> Q2 :: queue()@ 
split@split(N :: integer() >= 0, Q1 :: queue()) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{Q2 :: queue(), Q3 :: queue()}@ 
join@join(Q1 :: queue(), Q2 :: queue()) -> Q3 :: queue()@ 
filter@filter(Fun, Q1 :: queue()) -> Q2 :: queue()@ Fun = fun((Item :: term()) -> boolean() | list())   
member@member(Item :: term(), Q :: queue()) -> boolean()@ 
get@get(Q :: queue()) -> Item :: term()@ 
get_r@get_r(Q :: queue()) -> Item :: term()@ 
drop@drop(Q1 :: queue()) -> Q2 :: queue()@ 
drop_r@drop_r(Q1 :: queue()) -> Q2 :: queue()@ 
peek@peek(Q :: queue()) -> empty | {value, Item :: term()}@ 
peek_r@peek_r(Q :: queue()) -> empty | {value, Item :: term()}@ 
cons@cons(Item :: term(), Q1 :: queue()) -> Q2 :: queue()@ 
head@head(Q :: queue()) -> Item :: term()@ 
tail@tail(Q1 :: queue()) -> Q2 :: queue()@ 
snoc@snoc(Q1 :: queue(), Item :: term()) -> Q2 :: queue()@ 
daeh@daeh(Q :: queue()) -> Item :: term()@ 
last@last(Q :: queue()) -> Item :: term()@ 
liat@liat(Q1 :: queue()) -> Q2 :: queue()@ 
init@init(Q1 :: queue()) -> Q2 :: queue()@ 
lait@lait(Q1 :: queue()) -> Q2 :: queue()@ 
