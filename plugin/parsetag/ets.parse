all@all() -> [Tab]@ 
delete@delete(Tab) -> true@ 
delete@delete(Tab, Key) -> true@ 
delete_all_objects@delete_all_objects(Tab) -> true@ 
delete_object@delete_object(Tab,Object) -> true@ 
file2tab@file2tab(Filename) -> {ok, Tab} | {error, Reason}@ Filename =  Tab =  Reason = term()   
file2tab@file2tab(Filename, Options) -> {ok, Tab} | {error, Reason}@ Filename =  Tab =  Options = [Option] Option = {verify, boolean()} Reason = term()   
first@first(Tab) -> Key | '$end_of_table'@ 
foldl@foldl(Function, Acc0, Tab) -> Acc1@ Function = fun((Element :: term(), AccIn) -> AccOut) Tab =  Acc0 = Acc1 = AccIn = AccOut = term()   
foldr@foldr(Function, Acc0, Tab) -> Acc1@ Function = fun((Element :: term(), AccIn) -> AccOut) Tab =  Acc0 = Acc1 = AccIn = AccOut = term()   
from_dets@from_dets(Tab, DetsTab) -> true@ Tab =  DetsTab =  dets:tab_name()    
fun2ms@fun2ms(LiteralFun) -> MatchSpec@ LiteralFun = function() MatchSpec =  match_spec()    
give_away@give_away(Tab, Pid, GiftData) -> true@ 
i@i() -> ok@ 
i@i(Tab) -> ok@ Tab =  tab()    
info@info(Tab) -> [{Item, Value}] | undefined@ 
info@info(Tab, Item) -> Value | undefined@ 
init_table@init_table(Tab, InitFun) -> true@ Tab =  InitFun = fun((Arg) -> Res) Arg = read | close Res = end_of_input | {Objects :: [term()], InitFun} | term()   
insert@insert(Tab, ObjectOrObjects) -> true@ 
insert_new@insert_new(Tab, ObjectOrObjects) -> boolean()@ 
is_compiled_ms@is_compiled_ms(Term) -> boolean()@ 
last@last(Tab) -> Key | '$end_of_table'@ 
lookup@lookup(Tab, Key) -> [Object]@ 
lookup_element@lookup_element(Tab, Key, Pos) -> Elem@ 
match@match(Tab, Pattern) -> [Match]@ 
match@match(Tab, Pattern, Limit) -> {[Match],Continuation} | '$end_of_table'@ 
match@match(Continuation) -> {[Match],Continuation} | '$end_of_table'@ 
match_delete@match_delete(Tab, Pattern) -> true@ Tab =  Pattern =  match_pattern()    
match_object@match_object(Tab, Pattern) -> [Object]@ 
match_object@match_object(Tab, Pattern, Limit) -> {[Match],Continuation} | '$end_of_table'@ 
match_object@match_object(Continuation) -> {[Match],Continuation} | '$end_of_table'@ 
match_spec_compile@match_spec_compile(MatchSpec) -> CompiledMatchSpec@ 
match_spec_run@match_spec_run(List,CompiledMatchSpec) -> list()@ 
member@member(Tab, Key) -> true | false@ 
new@new(Name, Options) -> tid() | atom()@ 
next@next(Tab, Key1) -> Key2 | '$end_of_table'@ 
prev@prev(Tab, Key1) -> Key2 | '$end_of_table'@ 
rename@rename(Tab, Name) -> Name@ 
repair_continuation@repair_continuation(Continuation, MatchSpec) -> Continuation@ Continuation =  MatchSpec =  match_spec()    
safe_fixtable@safe_fixtable(Tab, true|false) -> true@ 
select@select(Tab, MatchSpec) -> [Match]@ 
select@select(Tab, MatchSpec, Limit) -> {[Match],Continuation} | '$end_of_table'@ 
select@select(Continuation) -> {[Match],Continuation} | '$end_of_table'@ 
select_count@select_count(Tab, MatchSpec) -> NumMatched@ 
select_delete@select_delete(Tab, MatchSpec) -> NumDeleted@ 
select_reverse@select_reverse(Tab, MatchSpec) -> [Match]@ 
select_reverse@select_reverse(Tab, MatchSpec, Limit) -> {[Match],Continuation} | '$end_of_table'@ 
select_reverse@select_reverse(Continuation) -> {[Match],Continuation} | '$end_of_table'@ 
setopts@setopts(Tab, Opts) -> true@ 
slot@slot(Tab, I) -> [Object] | '$end_of_table'@ 
tab2file@tab2file(Tab, Filename) -> ok | {error, Reason}@ Tab =  Filename =  Reason = term()   
tab2file@tab2file(Tab, Filename, Options) -> ok | {error, Reason}@ Tab =  Filename =  Options = [Option] Option = {extended_info, [ExtInfo]} ExtInfo = md5sum | object_count Reason = term()   
tab2list@tab2list(Tab) -> [Object]@ Tab =  Object = tuple()   
tabfile_info@tabfile_info(Filename) -> {ok, TableInfo} | {error, Reason}@ Filename =  TableInfo = [InfoItem] InfoItem = {name, atom()} ExtInfo = md5sum | object_count Type = bag | duplicate_bag | ordered_set | set Protection = private | protected | public Reason = term()   
table@table(Tab) -> QueryHandle@ Tab =  QueryHandle =  qlc:query_handle()    
table@table(Tab, Options) -> QueryHandle@ Tab =  QueryHandle =  Options = [Option] | Option Option = {n_objects, NObjects} | {traverse, TraverseMethod} NObjects = default | integer() >= 1 TraverseMethod = first_next<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| last_prev<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| select<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {select, MatchSpec ::  match_spec() }   
test_ms@test_ms(Tuple, MatchSpec) -> {ok, Result} | {error, Errors}@ Tuple = tuple() MatchSpec =  Result = term() Errors = [{warning | error, string()}]   
to_dets@to_dets(Tab, DetsTab) -> DetsTab@ Tab =  DetsTab =  dets:tab_name()    
update_counter@update_counter(Tab, Key, UpdateOp) -> Result@ 
update_element@update_element(Tab, Key, {Pos,Value}) -> true | false@ 
