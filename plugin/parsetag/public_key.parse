decrypt_private@decrypt_private(CipherText, Key) -> binary()@ 
decrypt_private@decrypt_private(CipherText, Key, Options) -> binary()@ 
decrypt_public@decrypt_public(CipherText, Key) - > binary()@ 
decrypt_public@decrypt_public(CipherText, Key, Options) - > binary()@ 
der_decode@der_decode(Asn1type, Der) -> term()@ 
der_encode@der_encode(Asn1Type, Entity) -> der_encoded()@ 
pem_decode@pem_decode(PemBin) -> [pem_entry()]@ 
pem_encode@pem_encode(PemEntries) -> binary()@ 
pem_entry_decode@pem_entry_decode(PemEntry) -> term()@ 
pem_entry_decode@pem_entry_decode(PemEntry, Password) -> term()@ 
pem_entry_encode@pem_entry_encode(Asn1Type, Entity) -> pem_entry()@ 
pem_entry_encode@pem_entry_encode(Asn1Type, Entity, {CipherInfo, Password}) -> pem_entry()@ 
encrypt_private@encrypt_private(PlainText, Key) -> binary()@ 
encrypt_public@encrypt_public(PlainText, Key) -> binary()@ 
pkix_decode_cert@pkix_decode_cert(Cert, otp|plain) ->  #'Certificate'{} | #'OTPCertificate'{}@ 
pkix_encode@pkix_encode(Asn1Type, Entity, otp | plain) -> der_encoded()@ 
pkix_is_issuer@pkix_is_issuer(Cert, IssuerCert) -> boolean()@ 
pkix_is_fixed_dh_cert@pkix_is_fixed_dh_cert(Cert) -> boolean()@ 
pkix_is_self_signed@pkix_is_self_signed(Cert) -> boolean()@ 
pkix_issuer_id@pkix_issuer_id(Cert, IssuedBy) -> {ok, IssuerID} | {error, Reason}@ 
pkix_normalize_name@pkix_normalize_name(Issuer) -> Normalized@ 
pkix_sign@pkix_sign(#'OTPTBSCertificate'{}, Key) -> der_encode()@ 
pkix_verify@pkix_verify(Cert, Key) -> boolean()@ 
sign@sign(Msg, DigestType, Key) -> binary()@ 
ssh_decode@ssh_decode(SshBin,  Type) -> [{public_key(), Attributes::list()}]@ 
ssh_encode@ssh_encode([{Key, Attributes}], Type) -> binary()@ 
verify@verify(Msg, DigestType, Signature, Key) -> boolean()@ 
