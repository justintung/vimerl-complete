all@all() -> [<a href="#type-tab_name" class="seealso">tab_name() ]@ 
bchunk@bchunk(Name, Continuation) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{Continuation2, Data} |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'$end_of_table' |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{error, Reason}@ Name =  Continuation = start |  Continuation2 =  Data = binary() | tuple() Reason = term()   
close@close(Name) -> ok | {error, Reason}@ Name =  Reason = term()   
delete@delete(Name, Key) -> ok | {error, Reason}@ Name =  Key = Reason = term()   
delete_all_objects@delete_all_objects(Name) -> ok | {error, Reason}@ Name =  Reason = term()   
delete_object@delete_object(Name, Object) -> ok | {error, Reason}@ Name =  Object =  Reason = term()   
first@first(Name) -> Key | '$end_of_table'@ Name =  Key = term()   
foldl@foldl(Function, Acc0, Name) -> Acc | {error, Reason}@ Name =  Function = fun((Object ::  Acc0 = Acc = AccIn = AccOut = Reason = term()   
foldr@foldr(Function, Acc0, Name) -> Acc | {error, Reason}@ Name =  Function = fun((Object ::  Acc0 = Acc = AccIn = AccOut = Reason = term()   
from_ets@from_ets(Name, EtsTab) -> ok | {error, Reason}@ Name =  EtsTab =  Reason = term()   
info@info(Name) -> InfoList | undefined@ Name =  InfoList = [InfoTuple] InfoTuple = {file_size, integer() >= 0}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {filename,  file:name() }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {keypos,  keypos() }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {size, integer() >= 0}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {type,  type() }   
info@info(Name, Item) -> Value | undefined@ Name =  Item = access Value = term()   
init_table@init_table(Name, InitFun) -> ok | {error, Reason}@ Name =  InitFun = fun((Arg) -> Res) Arg = read | close Res = end_of_input Reason = term() Data = binary() | tuple()   
init_table@init_table(Name, InitFun, Options) -> ok | {error, Reason}@ Name =  InitFun = fun((Arg) -> Res) Arg = read | close Res = end_of_input Options = Option | [Option] Option = {min_no_slots,  Reason = term() Data = binary() | tuple()   
insert@insert(Name, Objects) -> ok | {error, Reason}@ Name =  Objects =  Reason = term()   
insert_new@insert_new(Name, Objects) -> boolean()@ Name =  Objects =  object()  | [ object() ]   
is_compatible_bchunk_format@is_compatible_bchunk_format(Name, BchunkFormat) -> boolean()@ Name =  BchunkFormat = binary()   
is_dets_file@is_dets_file(Filename) -> boolean() | {error, Reason}@ Filename =  Reason = term()   
lookup@lookup(Name, Key) -> Objects | {error, Reason}@ Name =  Key = term() Objects = [ Reason = term()   
match@match(Continuation) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{[Match], Continuation2} |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'$end_of_table' |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{error, Reason}@ Continuation = Continuation2 =  Match = [term()] Reason = term()   
match@match(Name, Pattern) -> [Match] | {error, Reason}@ Name =  Pattern =  Match = [term()] Reason = term()   
match@match(Name, Pattern, N) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{[Match], Continuation} |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'$end_of_table' |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{error, Reason}@ Name =  Pattern =  N = default | integer() >= 0 Continuation =  Match = [term()] Reason = term()   
match_delete@match_delete(Name, Pattern) -> ok | {error, Reason}@ Name =  Pattern =  Reason = term()   
match_object@match_object(Continuation) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{Objects, Continuation2} |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'$end_of_table' |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{error, Reason}@ Continuation = Continuation2 =  Objects = [ Reason = term()   
match_object@match_object(Name, Pattern) -> Objects | {error, Reason}@ Name =  Pattern =  Objects = [ Reason = term()   
match_object@match_object(Name, Pattern, N) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{Objects, Continuation} |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'$end_of_table' |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{error, Reason}@ Name =  Pattern =  N = default | integer() >= 0 Continuation =  Objects = [ Reason = term()   
member@member(Name, Key) -> boolean() | {error, Reason}@ Name =  Key = Reason = term()   
next@next(Name, Key1) -> Key2 | '$end_of_table'@ Name =  Key1 = Key2 = term()   
open_file@open_file(Filename) -> {ok, Reference} | {error, Reason}@ Filename =  Reference = reference() Reason = term()   
open_file@open_file(Name, Args) -> {ok, Name} | {error, Reason}@ Name =  Args = [OpenArg] OpenArg = {access,  Reason = term()   
pid2name@pid2name(Pid) -> {ok, Name} | undefined@ Pid = pid() Name =  tab_name()    
repair_continuation@repair_continuation(Continuation, MatchSpec) -> Continuation2@ Continuation = Continuation2 =  MatchSpec =  match_spec()    
safe_fixtable@safe_fixtable(Name, Fix) -> ok@ Name =  Fix = boolean()   
select@select(Continuation) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{Selection, Continuation2} |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'$end_of_table' |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{error, Reason}@ Continuation = Continuation2 =  Selection = [term()] Reason = term()   
select@select(Name, MatchSpec) -> Selection | {error, Reason}@ Name =  MatchSpec =  Selection = [term()] Reason = term()   
select@select(Name, MatchSpec, N) -><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{Selection, Continuation} |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'$end_of_table' |<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{error, Reason}@ Name =  MatchSpec =  N = default | integer() >= 0 Continuation =  Selection = [term()] Reason = term()   
select_delete@select_delete(Name, MatchSpec) -> N | {error, Reason}@ Name =  MatchSpec =  N = integer() >= 0 Reason = term()   
slot@slot(Name, I) -> '$end_of_table' | Objects | {error, Reason}@ Name =  I = integer() >= 0 Objects = [ Reason = term()   
sync@sync(Name) -> ok | {error, Reason}@ Name =  Reason = term()   
table@table(Name) -> QueryHandle@ Name =  QueryHandle =  qlc:query_handle()    
table@table(Name, Options) -> QueryHandle@ Name =  Options = Option | [Option] Option = {n_objects, Limit} | {traverse, TraverseMethod} Limit = default | integer() >= 1 TraverseMethod = first_next | select | {select,  QueryHandle =  qlc:query_handle()    
to_ets@to_ets(Name, EtsTab) -> EtsTab | {error, Reason}@ Name =  EtsTab =  Reason = term()   
traverse@traverse(Name, Fun) -> Return | {error, Reason}@ Name =  Fun = fun((Object) -> FunReturn) Object =  FunReturn = continue Return = [term()] | OtherValue Val = Value = OtherValue = Reason = term()   
update_counter@update_counter(Name, Key, Increment) -> Result@ Name =  Key = term() Increment = {Pos, Incr} | Incr Pos = Incr = Result = integer()   
