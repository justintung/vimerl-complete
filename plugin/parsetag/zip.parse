zip@zip(Name, FileList) -> RetValue@ Name =  FileList = [FileSpec] FileSpec =  RetValue = {ok, FileName ::  file:name() }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {ok, {FileName ::  file:name() , binary()}}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {error, Reason :: term()}   
zip@zip(Name, FileList, Options) -> RetValue@ Name =  FileList = [FileSpec] FileSpec =  Options = [Option] Option = memory What = all Extension = Comment = CWD = string() RetValue = {ok, FileName ::  file:name() }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {ok, {FileName ::  file:name() , binary()}}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {error, Reason :: term()}   
create@create(Name, FileList) -> RetValue@ Name =  FileList = [FileSpec] FileSpec =  RetValue = {ok, FileName ::  file:name() }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {ok, {FileName ::  file:name() , binary()}}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {error, Reason :: term()}   
create@create(Name, FileList, Options) -> RetValue@ Name =  FileList = [FileSpec] FileSpec =  Options = [Option] Option = memory What = all Extension = Comment = CWD = string() RetValue = {ok, FileName ::  file:name() }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {ok, {FileName ::  file:name() , binary()}}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {error, Reason :: term()}   
unzip@unzip(Archive) -> RetValue@ Archive =  RetValue = {ok, FileList} FileList = [ FileBinList = [{ file:name() , binary()}]   
unzip@unzip(Archive, Options) -> RetValue@ Archive =  Options = [Option] Option = {file_list, FileList} FileList = [ FileBinList = [{ FileFilter = fun((ZipFile) -> boolean()) CWD = string() ZipFile =  RetValue = {ok, FileList}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {ok, FileBinList}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {error, Reason :: term()}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {error, {Name ::  file:name() , Reason :: term()}}   
extract@extract(Archive) -> RetValue@ Archive =  RetValue = {ok, FileList} FileList = [ FileBinList = [{ file:name() , binary()}]   
extract@extract(Archive, Options) -> RetValue@ Archive =  Options = [Option] Option = {file_list, FileList} FileList = [ FileBinList = [{ FileFilter = fun((ZipFile) -> boolean()) CWD = string() ZipFile =  RetValue = {ok, FileList}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {ok, FileBinList}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {error, Reason :: term()}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| {error, {Name ::  file:name() , Reason :: term()}}   
foldl@foldl(Fun, Acc0, Archive) -> {ok, Acc1} | {error, Reason}@ Fun = fun((FileInArchive, GetInfo, GetBin, AccIn) -> AccOut) FileInArchive =  GetInfo = fun(() ->  GetBin = fun(() -> binary()) Acc0 = Acc1 = AccIn = AccOut = term() Archive =  Reason = term()   
list_dir@list_dir(Archive) -> RetValue@ Archive =  RetValue = {ok, CommentAndFiles} | {error, Reason :: term()} CommentAndFiles = [ zip_comment()  |  zip_file() ]   
list_dir@list_dir(Archive, Options) -> RetValue@ Archive =  RetValue = {ok, CommentAndFiles} | {error, Reason :: term()} CommentAndFiles = [ Options = [Option] Option = cooked   
table@table(Archive) -> RetValue@ Archive =  RetValue = {ok, CommentAndFiles} | {error, Reason :: term()} CommentAndFiles = [ zip_comment()  |  zip_file() ]   
table@table(Archive, Options) -> RetValue@ Archive =  RetValue = {ok, CommentAndFiles} | {error, Reason :: term()} CommentAndFiles = [ Options = [Option] Option = cooked   
t@t(Archive) -> ok@ Archive =  ZipHandle = pid()   
tt@tt(Archive) -> ok@ Archive =  ZipHandle = pid()   
zip_open@zip_open(Archive) -> {ok, ZipHandle} | {error, Reason}@ Archive =  ZipHandle = pid() Reason = term()   
zip_open@zip_open(Archive, Options) -> {ok, ZipHandle} | {error, Reason}@ Archive =  ZipHandle = pid() Options = [Option] Option = cooked | memory | {cwd, CWD :: string()} Reason = term()   
zip_list_dir@zip_list_dir(ZipHandle) -> {ok, Result} | {error, Reason}@ Result = [ ZipHandle = pid() Reason = term()   
zip_get@zip_get(ZipHandle) -> {ok, [Result]} | {error, Reason}@ ZipHandle = pid() Result =  Reason = term()   
zip_get@zip_get(FileName, ZipHandle) -> {ok, Result} | {error, Reason}@ FileName =  ZipHandle = pid() Result =  Reason = term()   
zip_close@zip_close(ZipHandle) -> ok | {error, einval}@ ZipHandle = pid()   
